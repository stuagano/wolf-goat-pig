# Wolf Goat Pig Golf Simulation - Cursor Rules

You are an AI assistant working on a sophisticated Wolf Goat Pig golf betting simulation system. This is a realistic, chronological golf simulation with interactive human decision-making.

## üéØ Core System Architecture

### Backend (Python/FastAPI)
- **Interactive Simulation Engine** (`backend/app/simulation.py`)
- **Game State Management** (`backend/app/game_state.py`) 
- **REST API** (`backend/app/main.py`)
- **Real GHIN Integration** with JWT authentication
- **Course Management** with detailed hole data (yards, descriptions, stroke indexes)

### Frontend (React.js)
- **Simulation Mode** (`frontend/src/SimulationMode.js`) - Interactive chronological play
- **Monte Carlo Analysis** (`frontend/src/MonteCarloSimulation.js`) - Statistical analysis
- **Course Management** (`frontend/src/CourseManager.js`) - Course editing
- **Game Setup** (`frontend/src/GameSetupForm.js`) - Regular 4-player games

## üèåÔ∏è Interactive Simulation Flow (CRITICAL)

### The simulation follows this EXACT chronological pattern:

1. **Hole Setup**
   - Show captain rotation (rotates each hole)
   - Display hole info (par, yards, stroke index, description)

2. **Tee Shots Phase**
   - ALL players hit tee shots in hitting order
   - Realistic shot descriptions with distances, lies, remaining yardage
   - Player reactions to excellent/terrible shots

3. **Captain Decision Phase** 
   - Captain analyzes ALL tee shot results
   - **INTERACTIVE**: If human is captain, backend returns `interaction_needed`
   - Frontend shows decision UI with tee shot context
   - Options: Go Solo OR Request Partner

4. **Partnership Response Phase**
   - **INTERACTIVE**: If human is asked to be partner, backend returns `interaction_needed`
   - Frontend shows Accept/Decline partnership UI

5. **Hole Completion**
   - Approach shots and final scoring
   - Stroke adjustments based on handicaps

6. **Betting Phase**
   - Doubling opportunities with realistic dialogue

7. **Educational Summary**
   - Detailed analysis of decisions and outcomes
   - Course management advice
   - Opponent personality insights

## üîÑ Interactive Backend-Frontend Sync

### Backend Pattern (simulation.py):
```python
def simulate_hole(game_state, human_decisions) -> Tuple[GameState, List[str], dict]:
    # ... chronological simulation ...
    
    if human_decision_needed:
        interaction_needed = {
            "type": "captain_decision" | "partnership_response",
            "message": "Description for user",
            "options": [...],  # For captain decisions
            "captain_name": "Name"  # For partnership responses
        }
        return game_state, feedback, interaction_needed
    
    # Continue if no interaction needed
    return game_state, feedback, None
```

### Frontend Pattern (SimulationMode.js):
```javascript
const playHole = async () => {
    const response = await fetch('/simulation/play-hole', {
        body: JSON.stringify(pendingDecision)
    });
    
    if (data.interaction_needed) {
        setInteractionNeeded(data.interaction_needed);
        // Show decision UI
    } else {
        // Hole completed
    }
};

const makeDecision = (decision) => {
    setPendingDecision(decision);
    setInteractionNeeded(null);
    playHole(); // Continue with decision
};
```

## üéÆ Wolf Goat Pig Rules Implementation

### Captain Rotation
- **Hole 1**: 1st player in hitting order
- **Hole 2**: 2nd player in hitting order  
- **Hole 3**: 3rd player in hitting order
- **Hole 4**: 4th player in hitting order
- **Hole 5**: Back to 1st player (cycles)
- Implemented in `GameState.next_hole()`

### Decision Timing
- **NEVER** make decisions before seeing shot results
- Partnership decisions happen AFTER all tee shots
- Doubling happens AFTER hole completion
- All decisions are contextual and informed

### Scoring & Points
- Net scoring with handicap stroke allocation
- Partnership: 2v2, winner takes points from losers
- Solo: 1v3, captain wins/loses triple points
- Doubling multiplies stakes

## üîß Technical Standards

### Backend Standards
- **JAX/NumPy patterns** for simulation calculations
- **Functional programming** over classes where possible
- **Type hints** with proper return types
- **Error handling** with informative messages
- **Vectorized operations** for performance

### API Patterns
```python
# Interactive simulation endpoint
@app.post("/simulation/play-hole")
def play_simulation_hole(decisions: HumanDecisions):
    updated_game_state, feedback, interaction_needed = simulation_engine.simulate_hole(
        game_state, human_decisions
    )
    
    response = {"status": "ok", "game_state": _serialize_game_state(), "feedback": feedback}
    if interaction_needed:
        response["interaction_needed"] = interaction_needed
    return response
```

### Frontend Standards
- **React hooks** for state management
- **Parallel API calls** when possible
- **Loading states** for all async operations
- **Error boundaries** for graceful failures
- **Responsive design** with consistent styling

## üèóÔ∏è Key Components

### SimulationEngine (`simulation.py`)
- `simulate_hole()` - Main interactive chronological simulation
- `_simulate_individual_tee_shot()` - Realistic shot modeling
- `_make_computer_partnership_decision()` - AI decision making
- `_generate_educational_feedback()` - Learning insights

### GameState (`game_state.py`) 
- `setup_players()` - Initialize 4-player game
- `next_hole()` - Captain rotation and state reset
- `dispatch_action()` - State transitions (go_solo, request_partner, etc.)
- Course management with detailed hole data

### Computer Players
- **Personalities**: aggressive, conservative, strategic, balanced
- **Contextual decisions** based on:
  - Current points position
  - Hole difficulty
  - Handicap advantages
  - Game situation (holes remaining)

## üéØ GHIN Integration

### Real GHIN API Flow
```python
# 1. Authenticate
auth_response = httpx.post(GHIN_AUTH_URL, json={
    "user": {"email_or_ghin": email, "password": password},
    "token": static_token, "source": "GHINcom"
})
jwt = auth_response.json()["golfer_user"]["golfer_user_token"]

# 2. Search golfers
search_response = httpx.get(GHIN_SEARCH_URL, 
    headers={"Authorization": f"Bearer {jwt}"},
    params={"last_name": name, "first_name": first_name}
)
```

## üß† Decision Intelligence

### When Human is Captain:
- Show all tee shot results with context
- Calculate handicap compatibility for partners
- Display stroke advantages for the hole
- Provide strategic recommendations

### When Human is Asked to Partner:
- Show captain's position and strategy
- Display potential team dynamics
- Consider current game position

## ‚ö° Performance Guidelines

- **Vectorize** simulation calculations using JAX
- **Cache** course data and player configurations
- **Minimize** API calls through batching
- **Optimize** frontend renders with React.memo
- **Profile** Monte Carlo simulations for bottlenecks

## üé® UI/UX Principles

### Simulation Feedback
- **Chronological storytelling** with realistic dialogue
- **Color-coded feedback** for different information types
- **Context-rich decisions** showing all relevant data
- **Educational insights** after each hole

### Visual Hierarchy
- **Primary actions** (Play This Hole) prominent
- **Decision points** clearly highlighted with borders
- **Results and feedback** organized and scannable
- **Loading states** informative and engaging

## üöÄ Deployment & Environment

### Backend Environment Variables
```bash
GHIN_API_USER=your_email@domain.com
GHIN_API_PASS=your_password
GHIN_API_STATIC_TOKEN=optional_token
```

### Frontend Configuration
```javascript
const API_URL = process.env.REACT_APP_API_URL || "";
```

## üìã Testing Philosophy

- **BDD scenarios** for user workflows
- **Unit tests** for simulation logic
- **API tests** for endpoint validation
- **Integration tests** for complete flows
- **Monte Carlo validation** for statistical accuracy

## üéØ Development Priorities

1. **Maintain interactive flow** - Never break the chronological simulation
2. **Realistic golf simulation** - Accurate handicaps, scoring, course management
3. **Educational value** - Help users learn Wolf Goat Pig strategy
4. **Performance** - Smooth experience for all simulation modes
5. **GHIN integration** - Real golfer data for authentic experience

## üîÑ When Making Changes

### Always Consider:
- Does this maintain the chronological flow?
- Is the frontend-backend interaction clear?
- Are human decisions properly contextual?
- Does this enhance the educational value?
- Is the golf simulation realistic?

### Never:
- Make decisions before seeing shot results
- Break the interactive flow pattern
- Assume default decisions for humans
- Skip captain rotation
- Ignore handicap implications

---

This system creates the most realistic Wolf Goat Pig experience possible, with proper golf simulation, strategic decision-making, and educational feedback. Maintain these patterns for all future development. 