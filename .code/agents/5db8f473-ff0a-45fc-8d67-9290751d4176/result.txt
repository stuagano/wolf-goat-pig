Perfect! Now I have a comprehensive view. Let me analyze the gaps and create a structured proposal. Based on my analysis, I'll create a detailed table of proposed scenarios.

## Comprehensive Behave Feature Coverage Audit & Proposed Scenarios

### Current Coverage Summary

**simulation_health.feature** (2 scenarios):
- ✅ Basic /health endpoint (200 OK)
- ✅ Setup validation error (< 4 players)

**simulation_partnership.feature** (18 scenarios):
- ✅ Basic team formations (partners, solo, pending)
- ✅ Captain rotation
- ✅ Partnership requests (accept/decline)
- ✅ Multi-hole transitions
- ✅ 5-6 player games
- ⚠️ Missing: Admin gating, unauthorized access, invalid state transitions

**simulation_betting.feature** (12 scenarios):
- ✅ Doubles, carry-over, ping-pong
- ✅ Line of scrimmage
- ✅ Wagering closed state
- ✅ Special rules (float, option, duncan, tunkarri)
- ⚠️ Missing: Cross-feature validation with partnerships

---

## Proposed New Scenarios (No Backend Code Required)

| # | Scenario Name | Feature File | Purpose | Given/When/Then Sketch | Implementation Notes |
|---|---------------|--------------|---------|------------------------|----------------------|
| **1** | **Health endpoint requires no authentication** | simulation_health.feature | Verify public health check doesn't require x-admin-email | **Given** the simulation API is available<br>**When** I request the "GET" "health" endpoint without headers<br>**Then** the response code is 200<br>**And** the JSON response contains:<br>\| status \| ok \| | Use raw TestClient.get() without ADMIN_HEADERS. Ensures public monitoring compatibility. |
| **2** | **Unauthorized state access without admin header** | simulation_health.feature | Validate ENABLE_TEST_ENDPOINTS guards /simulation/state | **Given** a simulation is set up with 4 players<br>**When** I request "/simulation/state" without admin header<br>**Then** the response code is 403<br>**And** the JSON response contains:<br>\| detail \| Admin access required \| | Add step `@when('I request "{endpoint}" without admin header')` that omits ADMIN_HEADERS. Confirms x-admin-email enforcement. |
| **3** | **Unauthorized seed-state without admin header** | simulation_health.feature | Validate test seeding requires admin access | **Given** a simulation is set up with 4 players<br>**When** I attempt to seed state without admin header<br>**Then** the response code is 403 | Similar to #2, validates /simulation/test/seed-state protection. Critical for production safety. |
| **4** | **Setup with invalid course name** | simulation_health.feature | Test graceful handling of unknown course | **When** I submit setup with course "NonExistentCourse123"<br>**Then** the response code is 400 or 500<br>**And** the error detail mentions course not found | Reuse step_submit_simulation_setup, parameterize course name. Ensures clear error messaging. |
| **5** | **Setup with missing required player fields** | simulation_health.feature | Validate schema enforcement for player data | **When** I submit setup with players missing handicap<br>**Then** the response code is 422<br>**And** the JSON response contains validation errors | Test Pydantic validation. Players table with `{"id": "p1", "name": "Test"}` (no handicap). |
| **6** | **Partnership request when not captain** | simulation_partnership.feature | Verify only captain can initiate partnership | **Given** simulation at hole 3 with captain=p1<br>**When** I seed team formation with captain=bot1 (not next player)<br>**Then** state reflects seeded captain (permissive test mode) | Documents current permissive behavior. In real game, frontend enforces this. |
| **7** | **Solo captain attempt with 3 players** | simulation_partnership.feature | Validate solo only valid for 4+ players | **Given** simulation with 3 players<br>**When** I seed solo formation<br>**Then** state accepts it (permissive)<br>**Note:** Backend allows, frontend should prevent | Edge case documentation. Solo undefined for <4 players. |
| **8** | **Team formation persistence across state refresh** | simulation_partnership.feature | Ensure seeded teams survive GET /state calls | **Given** teams seeded as partners at hole 5<br>**When** I refresh state multiple times<br>**Then** team formation remains consistent across all refreshes | Validates state immutability. Call refresh_state 3x, assert team1/team2 unchanged. |
| **9** | **Pending request timeout handling** | simulation_partnership.feature | Document behavior when partnership never resolved | **Given** pending request at hole 8<br>**When** simulation moves to hole 9<br>**And** request still pending<br>**Then** state contains stale pending request | Tests cross-hole request persistence. Clarifies if backend clears or preserves pending state. |
| **10** | **Captain rotation with aardvark in 5-player game** | simulation_partnership.feature | Validate aardvark player excluded from captain rotation | **Given** 5 players with aardvark flag on bot5<br>**When** I seed captains across holes 1-9<br>**Then** aardvark player never becomes captain | Extended rotation test. Seed `{"team_formation": {"captain": "bot5", "type": "pending"}}` should work but violates game rules. |
| **11** | **Double partnership formation invalid** | simulation_partnership.feature | Verify player can't be on both teams | **Given** simulation at hole 4<br>**When** I seed teams with p1 in both team1 and team2<br>**Then** state accepts duplicate (permissive test mode) | Edge case: Backend likely doesn't validate. Documents current behavior. |
| **12** | **Betting state reset between holes** | simulation_betting.feature | Verify wagering_closed resets on new hole | **Given** hole 5 with wagering_closed=true<br>**When** simulation moves to hole 6<br>**Then** wagering_closed is false (if not seeded) | Clarifies auto-reset behavior. Seed hole 5, move to 6, check if wagering reopens. |
| **13** | **Line of scrimmage with invalid player** | simulation_betting.feature | Test resilience to bad player IDs | **Given** simulation at hole 7<br>**When** I seed line_of_scrimmage="invalid_player"<br>**Then** state contains "invalid_player" (permissive) | Permissive seeding allows invalid refs. Documents testing flexibility. |
| **14** | **Multiple special rules active simultaneously** | simulation_betting.feature | Validate concurrent float+option+duncan | **Given** simulation at hole 10<br>**When** I seed betting with:<br>\| float_invoked \| true \|<br>\| option_invoked \| true \|<br>\| duncan_invoked \| true \|<br>\| tunkarri_invoked \| true \|<br>**Then** all four flags are true | Combinatorial state test. Ensures no mutual exclusion bugs. |
| **15** | **Carry-over without doubled flag** | simulation_betting.feature | Clarify carry_over independent of doubled | **Given** hole 11 with carry_over=true, doubled=false<br>**When** I refresh state<br>**Then** carry_over is true and doubled is false | Validates orthogonality. Carry can occur without active double. |
| **16** | **Negative wager values** | simulation_betting.feature | Test boundary condition handling | **Given** simulation at hole 3<br>**When** I seed betting with current_wager=-5<br>**Then** state contains current_wager=-5 (permissive) | Permissive seeding. Real game prevents negatives via frontend. |
| **17** | **Wager exceeds INT_MAX** | simulation_betting.feature | Validate large number handling | **When** I seed current_wager=9999999<br>**Then** state contains current_wager=9999999 | Extreme value test. Ensures no overflow crashes. |
| **18** | **Partnership + betting synchronization** | NEW: simulation_integration.feature | Verify team changes reflect in betting context | **Given** hole 8 with teams=partners<br>**When** I seed solo formation + doubled=true<br>**Then** state shows solo captain can double | Cross-feature scenario. Solo captain exemption from wagering_closed applies. |
| **19** | **Complete 18-hole simulation flow** | NEW: simulation_integration.feature | End-to-end hole progression with scoring | **Given** simulation at hole 1<br>**When** I seed each hole 1-18 with varying teams<br>**Then** current_hole increments correctly<br>**And** final hole shows hole_complete=true | Long-form integration test. Seeds 18 holes in sequence, validates state transitions. |
| **20** | **Captain rotation parity with betting decisions** | NEW: simulation_integration.feature | Ensure next captain aligns with next_player_to_hit | **Given** holes 1-4 with different captains<br>**When** I seed next_player_to_hit matches captain<br>**Then** betting decisions available to correct player | Validates captain ↔ next_player_to_hit consistency. |
| **21** | **Seeding with null/missing fields** | simulation_health.feature | Test resilience to incomplete seed payloads | **When** I seed with `{"current_hole": null}`<br>**Then** state handles gracefully (no 500 error) | Null handling test. Seed `{"team_formation": null}`. |
| **22** | **Ball positions with holed-out players** | NEW: simulation_integration.feature | Validate holed players excluded from next_player_to_hit | **Given** hole 7 with p1 holed=true<br>**When** next_player cycles<br>**Then** p1 is skipped | Requires ball_positions seeding with holed flag. Validates hole completion logic. |
| **23** | **Ping-pong escalation to redouble limit** | simulation_betting.feature | Test maximum ping-pong counter (e.g., 5) | **Given** hole 15<br>**When** I seed ping_pong_count=10<br>**Then** state contains count=10 (no backend limit) | Validates no hardcoded ceiling. Documents permissive behavior. |
| **24** | **Aardvark toss result persistence** | simulation_partnership.feature | Ensure aardvark assignment survives refresh | **Given** 5 players with aardvark toss result<br>**When** I seed aardvark player and refresh<br>**Then** aardvark status persists | Depends on how aardvark is tracked (player property or state field). |
| **25** | **Course-specific par validation** | NEW: simulation_integration.feature | Verify scoring relative to course par | **Given** setup with Wing Point (known pars)<br>**When** I seed hole scores<br>**Then** analytics endpoints reflect course par | Requires /simulation/post-hole-analytics integration. |
| **26** | **State endpoint with query parameters** | simulation_health.feature | Test /simulation/state?hole=5 filtering | **When** I request "/simulation/state?hole=5"<br>**Then** response contains hole 5 data only | If backend supports query filters. Check main.py endpoint signature. |
| **27** | **Concurrent state reads** | simulation_health.feature | Validate idempotent GET /state calls | **Given** simulation at hole 12<br>**When** I issue 5 concurrent GET /state requests<br>**Then** all return identical payloads | Thread-safety test. Issue multiple requests in parallel, compare responses. |
| **28** | **Setup with duplicate player IDs** | simulation_health.feature | Test unique player constraint | **When** I submit setup with players p1, p1, bot1, bot2<br>**Then** response code is 422 or setup succeeds with 2 players | Backend may auto-dedupe or reject. Documents current behavior. |
| **29** | **Empty betting state at hole 1** | simulation_betting.feature | Verify default betting initialization | **Given** new simulation at hole 1<br>**When** I refresh state without seeding betting<br>**Then** base_wager has default value | Documents zero-seed defaults. Check if backend initializes base_wager=1. |
| **30** | **Team formation with missing opponents list** | simulation_partnership.feature | Test solo formation with null opponents | **When** I seed solo with `{"type": "solo", "solo_player": "p1", "opponents": null}`<br>**Then** state handles gracefully | Null handling for nested arrays. |

---

## Implementation Strategy

### Step Functions Already Available
- ✅ `@when('I request the "{method}" "{endpoint}" endpoint')`
- ✅ State seeding with dot-notation
- ✅ Assertion helpers for nested JSON

### New Steps Needed (No Backend Changes)
```python
@when('I request "{endpoint}" without admin header')
def step_request_no_auth(context, endpoint):
    """Make request without x-admin-email header."""
    context.response = context.client.get(endpoint)  # No headers

@when('I submit setup with course "{course_name}"')
def step_setup_custom_course(context, course_name):
    """Setup with custom course name."""
    # Reuse setup logic, parameterize course

@when('I issue {count:d} concurrent GET {endpoint} requests')
def step_concurrent_requests(context, count, endpoint):
    """Issue N parallel requests for thread-safety testing."""
    import concurrent.futures
    with concurrent.futures.ThreadPoolExecutor() as executor:
        futures = [executor.submit(context.client.get, endpoint, headers=ADMIN_HEADERS) 
                   for _ in range(count)]
        context.responses = [f.result() for f in futures]
```

### Priority Tiers

**Tier 1 - Critical Security & Validation** (Scenarios 2, 3, 5):
- Admin header enforcement
- Schema validation
- Production safety

**Tier 2 - Core Game Logic Parity** (Scenarios 6, 9, 12, 18, 20):
- Partnership-betting synchronization
- State transition behavior
- Cross-feature integration

**Tier 3 - Edge Cases & Resilience** (Scenarios 7, 11, 13, 16, 21, 28):
- Boundary conditions
- Invalid data handling
- Graceful degradation

**Tier 4 - Long-Form Flows** (Scenarios 19, 22, 25):
- Multi-hole narratives
- End-to-end scoring
- Real-world simulation patterns

---

## Key Insights

1. **Permissive Test Mode**: Current seed-state endpoint allows invalid game states (negative wagers, duplicate teams). This is GOOD for testing flexibility but needs documentation.

2. **Admin Gating Gap**: No scenarios validate x-admin-email requirement. Critical for ENABLE_TEST_ENDPOINTS=true environments.

3. **Cross-Feature Gaps**: Partnership and betting features tested in isolation. Need scenarios validating their interaction (e.g., solo captain double when wagering closed).

4. **Long-Form Narratives Missing**: No 18-hole progression test. Add "complete round simulation" scenario.

5. **Error Response Coverage**: Only one error scenario (< 4 players). Need bad course, missing fields, unauthorized access scenarios.

6. **Concurrency**: No thread-safety tests for state reads. Add concurrent GET /state scenario.

All 30 scenarios leverage existing `/simulation/test/seed-state` and assertion infrastructure—zero backend changes required!
