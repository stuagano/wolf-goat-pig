Now let me document the findings. Based on my investigation, I can see the issue clearly:

## Summary of Findings

Based on my investigation of the Wolf Goat Pig codebase, I've identified the root cause of the "Not allowed" errors when creating a Simulation game locally:

### Key Issues Identified

1. **Empty REACT_APP_API_URL**: The frontend `.env` files have `REACT_APP_API_URL=` (empty), which causes the frontend to use relative URLs that rely on the `package.json` proxy

2. **Proxy Configuration**: The `frontend/package.json` has `"proxy": "http://localhost:8000"` which should work for relative URLs

3. **CORS Configuration**: The backend (`backend/app/main.py:173-179`) correctly allows `http://localhost:3000` and `http://localhost:3001` when not in production mode

4. **Admin Headers**: Most simulation endpoints (like `/simulation/setup`) do NOT require admin headers. Only `/simulation/test/seed-state` and `/simulation/state` require the `X-Admin-Email` header

5. **Environment Detection**: The backend uses `ENVIRONMENT` environment variable to determine if it's in development mode and enable CORS for localhost

### The Problem

When `REACT_APP_API_URL` is empty, the code uses `''` as the base URL:
- `useSimulationApi.js:3`: `const API_URL = process.env.REACT_APP_API_URL || '';`
- `SimulationMode.js` uses `SIMULATION_API_URL` from config, which also defaults to `''`

This means requests go to relative URLs like `/simulation/setup`, which should be proxied through `package.json` proxy. However, the "Not allowed" error suggests either:
1. The proxy isn't working properly
2. CORS is blocking the request
3. The backend isn't running on port 8000
4. The `ENVIRONMENT` variable isn't set to allow localhost CORS

## Minimal Checklist for Local Simulation Mode

Here's the straightforward process to boot both services and create/play a local Simulation game:

### 1. Backend Setup
```bash
# Terminal 1: Backend
cd backend
export ENVIRONMENT=development
export DATABASE_URL="sqlite:///./reports/wolf_goat_pig.db"
python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
```

**Verify**: Backend should show at http://localhost:8000/docs

### 2. Frontend Setup
```bash
# Terminal 2: Frontend
cd frontend
# Ensure .env has these settings:
# REACT_APP_API_URL=
# (empty, to use package.json proxy)
npm start
```

**Verify**: Frontend should open at http://localhost:3000

### 3. Using the Provided Dev Script (Alternative)
```bash
# From project root
./scripts/development/dev.sh
```

This script:
- Sets `ENVIRONMENT=development`
- Starts backend on port 8000
- Starts frontend on port 3000 (npm start)
- Both services run concurrently

### 4. Potential Issues & Solutions

| Issue | Symptom | Solution |
|-------|---------|----------|
| **CORS Error** | "Not allowed" or CORS in browser console | Ensure `ENVIRONMENT=development` is set when starting backend |
| **Connection Refused** | Can't reach backend | Verify backend is running on port 8000 |
| **Proxy Not Working** | 404 or wrong URL | Ensure `REACT_APP_API_URL` is empty in `.env`, restart `npm start` |
| **Port Conflict** | Frontend on wrong port | Frontend must be on 3000 or 3001 (CORS whitelist in backend:175-178) |
| **Admin Required Error** | 403 on `/simulation/state` | Only these endpoints need `X-Admin-Email` header, main simulation endpoints don't |

### 5. Environment File Checklist

**backend/.env:**
```bash
ENVIRONMENT=development  # or ENV=development
DATABASE_URL=sqlite:///./wolf_goat_pig.db
```

**frontend/.env:**
```bash
REACT_APP_API_URL=
# Must be empty to use package.json proxy
REACT_APP_USE_MOCK_AUTH=true  # Optional, for testing without Auth0
```

### 6. Testing the Connection

Once both services are running:

1. **Test Backend Directly**:
   ```bash
   curl http://localhost:8000/simulation/available-personalities
   ```

2. **Test Frontend Proxy**:
   - Open browser DevTools Network tab
   - Navigate to Simulation mode in the UI
   - Check that requests to `/simulation/*` are being proxied to `localhost:8000`

3. **Create a Simulation Game**:
   - Fill in human player name and handicap
   - Select 3 computer opponents
   - Click "Start Simulation"
   - Should see game setup without "Not allowed" errors

### 7. Quick Troubleshooting Commands

```bash
# Check if backend is running on port 8000
lsof -i :8000

# Check if frontend is running on port 3000
lsof -i :3000

# Check backend environment variables
# (while backend is running, check logs for CORS origins)

# Restart with clean state
pkill -f uvicorn
pkill -f "react-scripts start"
./scripts/development/dev.sh
```

### 8. Key Files Reference

- **Backend CORS**: `backend/app/main.py:165-194` (CORS middleware configuration)
- **Backend Routes**: `backend/app/main.py:4279+` (simulation endpoints)
- **Frontend API Hook**: `frontend/src/hooks/useSimulationApi.js:3` (API_URL configuration)
- **Frontend Proxy**: `frontend/package.json:42` (proxy setting)
- **Environment Config**: `frontend/src/config/environment.js:14-18` (simulation API URL)
- **Dev Script**: `scripts/development/dev.sh` (automated startup)

### 9. Most Likely Root Cause

Based on the investigation, the "Not allowed" error is most likely due to:

1. **Backend not setting ENVIRONMENT=development**: Without this, CORS doesn't allow localhost origins
2. **Frontend on wrong port**: Must be 3000 or 3001 (check `lsof -i :3000`)
3. **Proxy not configured**: If `REACT_APP_API_URL` is set to a value, it bypasses the proxy

**Immediate Fix**:
```bash
# Backend terminal
export ENVIRONMENT=development
cd backend
python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

# Frontend terminal  
cd frontend
# Edit .env: ensure REACT_APP_API_URL= is empty
npm start
```

This should resolve the "Not allowed" errors and enable local Simulation mode to work end-to-end.
