🎯 ADK auto-sync aliases loaded!
💡 Use 'sync' to sync with upstream anytime
💡 Use 'synccheck' to check sync status
docs/prd.md:# Wolf Goat Pig Golf Simulation - Product Requirements Document (PRD)
docs/prd.md:Wolf Goat Pig Golf Simulation is a comprehensive digital implementation of the classic golf betting game from Wing Point Golf & Country Club. The product transforms the complex, paper-based golf betting experience into an interactive, real-time simulation that combines authentic golf physics, strategic betting mechanics, and educational gameplay analysis.
docs/prd.md:- **Shot Simulation**: <50ms per shot calculation
docs/prd.md:### Epic 2: Enhanced Simulation Features
docs/architecture.md:- **Project**: BMad - Wolf Goat Pig Golf Simulation
docs/architecture.md:│ - State Mgmt    │    │ - Simulation    │    │ - Course Data   │
docs/architecture.md:- **Simulation Engine**: Monte Carlo analysis with realistic golf physics
docs/architecture.md:- **Simulation Results**: Statistical analysis and result caching
docs/architecture.md:│   │   ├── MonteCarloSimulation.js # Simulation interface
docs/architecture.md:│   │   ├── SimulationMode.js       # Simulation controls
docs/architecture.md:│   │   └── GameSetup.js           # Simulation setup
docs/architecture.md:│   └── useSimulationApi.js        # Simulation API integration
docs/architecture.md:- Simulation Tests: Monte Carlo validation
docs/architecture.md:Feature: Monte Carlo Simulation
docs/architecture.md:- **Shot Simulation**: <50ms per shot calculation
docs/requirements.txt:# Wolf Goat Pig Golf Simulation - Production Dependencies
docs/archive/agent-guides/crush.md:### Interactive Simulation Flow (CRITICAL)
docs/WOLF_GOAT_PIG_README.md:# 🐺🐐🐷 Wolf Goat Pig Golf Game Simulation
docs/WOLF_GOAT_PIG_README.md:- **`WolfGoatPigSimulation`**: Main game engine
docs/TODO.md:# Wolf Goat Pig Golf Simulation - TODO List (BMad Method)
docs/TODO.md:### Epic: AI & Simulation Enhancements
docs/product/gameplay-user-journey.md:**User Action:** Navigate to Simulation Mode
docs/product/gameplay-user-journey.md:- Click "Start Simulation"
docs/product/integration-summary.md:# Wolf-Goat-Pig Simulation Mode - Complete Integration Summary
docs/product/integration-summary.md:- ✅ **EnhancedSimulationLayout** - New layout combining timeline and poker betting
docs/product/integration-summary.md:### **Simulation Setup**
docs/product/integration-summary.md:- `SimulationMode.js` - Added timeline and poker state management
docs/product/integration-summary.md:- `EnhancedSimulationLayout.js` - New layout integrating all components
docs/README.md:- [Simulation fixes](./guides/simulation-fixes.md) - Simulation component fixes
docs/stories/story-006-simulation-mode.md:- SimulationMode.js - Turn-based game orchestrator
docs/architecture/source-tree.md:- `test_simulation_components.py` - Simulation testing
docs/architecture/source-tree.md:- `simulation/` - Simulation components
docs/architecture/source-tree.md:  - `SimulationMode.js` - Simulation interface
docs/architecture/source-tree.md:  - `MonteCarloSimulation.js` - Monte Carlo engine
docs/architecture/source-tree.md:- `useSimulationApi.js` - Simulation API
docs/architecture/source-tree.md:├── test_simulation.py        # Simulation tests
docs/project-brief.md:- ✅ **Monte Carlo Simulation**: Advanced statistical analysis engine
docs/guides/production-setup.md:| **Core Game Logic** | ✅ 95% | Simulation working, all rules implemented |
docs/guides/local-development.md:## Testing the Simulation Flow
docs/guides/local-development.md:2. Click "Start Simulation" or navigate to simulation mode
docs/guides/local-development.md:- **Simulation Logic**: `backend/app/wolf_goat_pig_simulation.py`
docs/guides/browser-testing.md:# 🧪 Browser Testing Guide for Wolf-Goat-Pig Simulation
docs/guides/browser-testing.md:### 3. Test the Simulation Flow
docs/guides/browser-testing.md:#### Step 1: Navigate to Simulation Mode
docs/guides/browser-testing.md:- Click on "Start Simulation" or navigate to the simulation section
docs/guides/browser-testing.md:4. Click "Start Simulation"
docs/guides/browser-testing.md:- Game header showing "Simulation - Hole 1"
docs/guides/browser-testing.md:| Setup Simulation | ✅ Fixed |
docs/guides/simulation-fixes.md:# Wolf Goat Pig Simulation Startup Fixes
docs/guides/simulation-fixes.md:- Simulation creation
docs/ENHANCED_WGP_FEATURES.md:## 🏌️ Shot Simulation Features
docs/SYSTEM_DEMONSTRATION_RESULTS.md:## 🎲 Monte Carlo Simulation Successfully Running!
docs/SYSTEM_DEMONSTRATION_RESULTS.md:- ✅ Simulation parameter controls
docs/SYSTEM_DEMONSTRATION_RESULTS.md:1. ✅ **Realistic Golf Simulation**: Authentic handicap-based scoring and outcomes
docs/DEPLOYMENT_CHECKLIST.md:- `GET /simulation/run` - Simulation endpoint
backend/smoke_tests.py:from app.wolf_goat_pig_simulation import WolfGoatPigSimulation, WGPPlayer
backend/smoke_tests.py:    sim = WolfGoatPigSimulation(player_count=4, players=players)
backend/smoke_tests.py:    print("   ✓ Simulation created with 4 players")
backend/smoke_tests.py:    sim = WolfGoatPigSimulation(player_count=4, players=players)
backend/smoke_tests.py:    sim = WolfGoatPigSimulation(player_count=4, players=players)
backend/smoke_tests.py:    sim = WolfGoatPigSimulation(player_count=4, players=players)
backend/smoke_tests.py:    sim = WolfGoatPigSimulation(player_count=4, players=players)
backend/smoke_tests.py:    sim = WolfGoatPigSimulation(player_count=4, players=players)
backend/smoke_tests.py:    sim = WolfGoatPigSimulation(player_count=4, players=players)
backend/smoke_tests.py:    runner.run_test("Basic Simulation Creation", test_basic_simulation_creation)
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/securitycenter.v1.json:"$ref": "Simulation"
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/securitycenter.v1.json:"Simulation": {
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/securitycenter.v1.json:"id": "Simulation",
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/securitycenter.v1.json:"description": "Full resource name of the Simulation: `organizations/123/simulations/456`",
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/orgpolicy.v2.json:"supportsSimulation": {
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/policysimulator.v1.json:"accessPolicySimulations": {
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/policysimulator.v1.json:"flatPath": "v1/folders/{foldersId}/locations/{locationsId}/accessPolicySimulations/{accessPolicySimulationsId}/operations/{operationsId}",
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/policysimulator.v1.json:"id": "policysimulator.folders.locations.accessPolicySimulations.operations.get",
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/policysimulator.v1.json:"pattern": "^folders/[^/]+/locations/[^/]+/accessPolicySimulations/[^/]+/operations/.*$",
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/policysimulator.v1.json:"accessPolicySimulations": {
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/policysimulator.v1.json:"flatPath": "v1/organizations/{organizationsId}/locations/{locationsId}/accessPolicySimulations/{accessPolicySimulationsId}/operations/{operationsId}",
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/policysimulator.v1.json:"id": "policysimulator.organizations.locations.accessPolicySimulations.operations.get",
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/policysimulator.v1.json:"pattern": "^organizations/[^/]+/locations/[^/]+/accessPolicySimulations/[^/]+/operations/.*$",
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/policysimulator.v1.json:"accessPolicySimulations": {
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/policysimulator.v1.json:"flatPath": "v1/projects/{projectsId}/locations/{locationsId}/accessPolicySimulations/{accessPolicySimulationsId}/operations/{operationsId}",
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/policysimulator.v1.json:"id": "policysimulator.projects.locations.accessPolicySimulations.operations.get",
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/policysimulator.v1.json:"pattern": "^projects/[^/]+/locations/[^/]+/accessPolicySimulations/[^/]+/operations/.*$",
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/policysimulator.v1alpha.json:"accessPolicySimulations": {
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/policysimulator.v1alpha.json:"flatPath": "v1alpha/folders/{foldersId}/locations/{locationsId}/accessPolicySimulations/{accessPolicySimulationsId}/operations/{operationsId}",
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/policysimulator.v1alpha.json:"id": "policysimulator.folders.locations.accessPolicySimulations.operations.get",
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/policysimulator.v1alpha.json:"pattern": "^folders/[^/]+/locations/[^/]+/accessPolicySimulations/[^/]+/operations/.*$",
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/policysimulator.v1alpha.json:"accessPolicySimulations": {
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/policysimulator.v1alpha.json:"flatPath": "v1alpha/organizations/{organizationsId}/locations/{locationsId}/accessPolicySimulations/{accessPolicySimulationsId}/operations/{operationsId}",
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/policysimulator.v1alpha.json:"id": "policysimulator.organizations.locations.accessPolicySimulations.operations.get",
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/policysimulator.v1alpha.json:"pattern": "^organizations/[^/]+/locations/[^/]+/accessPolicySimulations/[^/]+/operations/.*$",
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/policysimulator.v1alpha.json:"accessPolicySimulations": {
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/policysimulator.v1alpha.json:"flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/accessPolicySimulations/{accessPolicySimulationsId}/operations/{operationsId}",
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/policysimulator.v1alpha.json:"id": "policysimulator.projects.locations.accessPolicySimulations.operations.get",
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/policysimulator.v1alpha.json:"pattern": "^projects/[^/]+/locations/[^/]+/accessPolicySimulations/[^/]+/operations/.*$",
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/policysimulator.v1beta.json:"accessPolicySimulations": {
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/policysimulator.v1beta.json:"flatPath": "v1beta/folders/{foldersId}/locations/{locationsId}/accessPolicySimulations/{accessPolicySimulationsId}/operations/{operationsId}",
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/policysimulator.v1beta.json:"id": "policysimulator.folders.locations.accessPolicySimulations.operations.get",
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/policysimulator.v1beta.json:"pattern": "^folders/[^/]+/locations/[^/]+/accessPolicySimulations/[^/]+/operations/.*$",
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/policysimulator.v1beta.json:"accessPolicySimulations": {
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/policysimulator.v1beta.json:"flatPath": "v1beta/organizations/{organizationsId}/locations/{locationsId}/accessPolicySimulations/{accessPolicySimulationsId}/operations/{operationsId}",
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/policysimulator.v1beta.json:"id": "policysimulator.organizations.locations.accessPolicySimulations.operations.get",
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/policysimulator.v1beta.json:"pattern": "^organizations/[^/]+/locations/[^/]+/accessPolicySimulations/[^/]+/operations/.*$",
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/policysimulator.v1beta.json:"accessPolicySimulations": {
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/policysimulator.v1beta.json:"flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/accessPolicySimulations/{accessPolicySimulationsId}/operations/{operationsId}",
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/policysimulator.v1beta.json:"id": "policysimulator.projects.locations.accessPolicySimulations.operations.get",
backend/.venv-prod/lib/python3.13/site-packages/googleapiclient/discovery_cache/documents/policysimulator.v1beta.json:"pattern": "^projects/[^/]+/locations/[^/]+/accessPolicySimulations/[^/]+/operations/.*$",
backend/.venv-prod/lib/python3.13/site-packages/pygments/lexers/hdl.py:                # Simulation control tasks (20.2)
backend/.venv-prod/lib/python3.13/site-packages/pygments/lexers/hdl.py:                # Simulation time functions (20.3)
backend/.venv-prod/lib/python3.13/site-packages/pygments/lexers/_scilab_builtins.py:    'xcosSimulationStarted',
Binary file backend/.venv-prod/lib/python3.13/site-packages/pygments/lexers/__pycache__/_scilab_builtins.cpython-313.pyc matches
Binary file backend/.venv-prod/lib/python3.13/site-packages/numpy/random/_generator.cpython-313-darwin.so matches
Binary file backend/.venv-prod/lib/python3.13/site-packages/numpy/random/mtrand.cpython-313-darwin.so matches
backend/backend.log:INFO:app.main:✅ Simulation initialization verified
backend/startup.py:        from app.wolf_goat_pig_simulation import WolfGoatPigSimulation
backend/startup.py:        # 3. Simulation engine
backend/startup.py:            test_sim = WolfGoatPigSimulation(player_count=4)
backend/startup.py:            logging.info("✅ Simulation engine health check passed")
backend/startup.py:            logging.error(f"❌ Simulation engine health check failed: {e}")
backend/startup.py:            from app.wolf_goat_pig_simulation import WolfGoatPigSimulation
backend/startup.py:        # 3. Simulation engine check
backend/startup.py:            test_sim = WolfGoatPigSimulation(player_count=4)
backend/startup.py:            logger.info("✅ Simulation engine verified")
backend/startup.py:            health_status["warnings"].append("Simulation engine check failed")
backend/startup.py:            logger.warning(f"⚠️ Simulation engine check failed: {e}")
backend/app/wolf_goat_pig_simulation.py:class WolfGoatPigSimulation:
backend/app/wolf_goat_pig_simulation.py:        new_sim = WolfGoatPigSimulation(player_count=len(wgp_players), players=wgp_players)
backend/app/models.py:class SimulationResult(Base):
Binary file backend/app/__pycache__/main.cpython-313.pyc matches
Binary file backend/app/__pycache__/schemas.cpython-313.pyc matches
Binary file backend/app/__pycache__/schemas.cpython-312.pyc matches
Binary file backend/app/__pycache__/main.cpython-312.pyc matches
Binary file backend/app/__pycache__/wolf_goat_pig_simulation.cpython-312.pyc matches
Binary file backend/app/__pycache__/wolf_goat_pig_simulation.cpython-313.pyc matches
Binary file backend/app/__pycache__/models.cpython-312.pyc matches
Binary file backend/app/__pycache__/models.cpython-313.pyc matches
Binary file backend/app/__pycache__/simulation_timeline_enhancements.cpython-312.pyc matches
Binary file backend/app/__pycache__/simulation_timeline_enhancements.cpython-313.pyc matches
Binary file backend/app/__pycache__/simulation.cpython-312.pyc matches
backend/app/schemas.py:class SimulationCourseData(BaseModel):
backend/app/schemas.py:# Game Setup and Simulation Schemas
backend/app/simulation_timeline_enhancements.py:class SimulationTimelineManager:
backend/app/simulation_timeline_enhancements.py:        simulation.timeline_manager = SimulationTimelineManager()
backend/app/main.py:from .wolf_goat_pig_simulation import WolfGoatPigSimulation, WGPPlayer, BallPosition, TeamFormation
backend/app/main.py:# Initialize Wolf Goat Pig Simulation (will be replaced when game starts)
backend/app/main.py:wgp_simulation = WolfGoatPigSimulation(player_count=4)
backend/app/main.py:class SimulationSeedRequest(BaseModel):
backend/app/main.py:    title="Wolf Goat Pig Golf Simulation API",
backend/app/main.py:            test_simulation = WolfGoatPigSimulation(player_count=4)
backend/app/main.py:            logger.info("✅ Simulation initialization verified")
backend/app/main.py:            logger.warning(f"⚠️ Simulation test failed (non-critical): {e}")
backend/app/main.py:        # 5. Simulation initialization test
backend/app/main.py:            test_simulation = WolfGoatPigSimulation(player_count=4)
backend/app/main.py:                "message": "Simulation engine operational"
backend/app/main.py:            logger.error(f"Simulation initialization test failed: {e}")
backend/app/main.py:                "message": f"Simulation test failed: {str(e)}"
backend/app/main.py:        from .services.monte_carlo import run_monte_carlo_simulation, SimulationParams
backend/app/main.py:            mc_params = SimulationParams()
backend/app/main.py:        total_simulations = db.query(models.SimulationResult).count()
backend/app/main.py:class SimulationSetupRequest(BaseModel):
backend/app/main.py:class SimulationPlayShotRequest(BaseModel):
backend/app/main.py:class SimulationPlayHoleRequest(BaseModel):
backend/app/main.py:        wgp_simulation = WolfGoatPigSimulation(
backend/app/main.py:        logger.info("Simulation setup completed successfully")
backend/app/main.py:            "message": "Simulation initialized successfully",
backend/app/main.py:        logger.error(f"Simulation setup failed: {e}")
backend/app/main.py:def play_next_shot(request: SimulationPlayShotRequest = None):
backend/app/main.py:            raise HTTPException(status_code=400, detail="Simulation not initialized. Call /simulation/setup first.")
backend/app/main.py:            raise HTTPException(status_code=400, detail="Simulation not initialized. Call /simulation/setup first.")
backend/app/main.py:    def seed_simulation_state(payload: SimulationSeedRequest):
backend/app/main.py:            raise HTTPException(status_code=400, detail="Simulation not initialized. Call /simulation/setup first.")
backend/app/main.py:        raise HTTPException(status_code=404, detail="Simulation not initialized")
backend/app/main.py:            raise HTTPException(status_code=400, detail="Simulation not initialized")
backend/app/main.py:            raise HTTPException(status_code=400, detail="Simulation not initialized")
backend/app/main.py:            raise HTTPException(status_code=400, detail="Simulation not initialized")
backend/app/main.py:            raise HTTPException(status_code=400, detail="Simulation not initialized")
backend/app/main.py:            raise HTTPException(status_code=400, detail="Simulation not initialized")
backend/app/main.py:            raise HTTPException(status_code=400, detail="Simulation not initialized")
backend/app/services/monte_carlo.py:class SimulationParams:
backend/app/services/monte_carlo.py:class SimulationResult:
backend/app/services/monte_carlo.py:    def __init__(self, params: Optional[SimulationParams] = None):
backend/app/services/monte_carlo.py:        self.params = params or SimulationParams()
backend/app/services/monte_carlo.py:        params: Optional[SimulationParams] = None
backend/app/services/monte_carlo.py:    ) -> SimulationResult:
backend/app/services/monte_carlo.py:        params: SimulationParams,
backend/app/services/monte_carlo.py:    ) -> SimulationResult:
backend/app/services/monte_carlo.py:                    print(f"Simulation batch failed: {e}")
backend/app/services/monte_carlo.py:        params: SimulationParams,
backend/app/services/monte_carlo.py:    ) -> SimulationResult:
backend/app/services/monte_carlo.py:    ) -> SimulationResult:
backend/app/services/monte_carlo.py:            return SimulationResult(
backend/app/services/monte_carlo.py:        return SimulationResult(
backend/app/services/monte_carlo.py:) -> SimulationResult:
backend/app/services/monte_carlo.py:    params = SimulationParams(
Binary file backend/app/services/__pycache__/monte_carlo.cpython-312.pyc matches
Binary file backend/app/services/__pycache__/monte_carlo.cpython-313.pyc matches
backend/.pytest_cache/v/cache/nodeids:  "tests/simulation/test_simulation_scenarios.py::TestSimulationMode::test_aggressive_captain_solo",
backend/.pytest_cache/v/cache/nodeids:  "tests/simulation/test_simulation_scenarios.py::TestSimulationMode::test_full_18_hole_game",
backend/.pytest_cache/v/cache/nodeids:  "tests/simulation/test_simulation_scenarios.py::TestSimulationMode::test_karl_marx_rule",
backend/.pytest_cache/v/cache/nodeids:  "tests/simulation/test_simulation_scenarios.py::TestSimulationMode::test_partnership_formation",
backend/.pytest_cache/v/cache/nodeids:  "tests/test_simulation_integration.py::TestSimulationIntegration::test_play_next_shot_without_setup",
backend/.pytest_cache/v/cache/nodeids:  "tests/test_simulation_integration.py::TestSimulationIntegration::test_simulation_error_handling",
backend/.pytest_cache/v/cache/nodeids:  "tests/test_simulation_integration.py::TestSimulationIntegration::test_simulation_full_flow",
backend/.pytest_cache/v/cache/nodeids:  "tests/test_simulation_integration.py::TestSimulationIntegration::test_simulation_legacy_format_compatibility",
backend/.pytest_cache/v/cache/nodeids:  "tests/test_simulation_integration.py::TestSimulationIntegration::test_simulation_setup_invalid_players",
backend/.pytest_cache/v/cache/nodeids:  "tests/test_simulation_integration.py::TestSimulationIntegration::test_simulation_setup_success",
backend/.pytest_cache/v/cache/nodeids:  "tests/test_simulation_unit.py::TestSimulationErrorHandling::test_invalid_partnership_request",
backend/.pytest_cache/v/cache/nodeids:  "tests/test_simulation_unit.py::TestSimulationErrorHandling::test_invalid_player_count",
backend/.pytest_cache/v/cache/nodeids:  "tests/test_simulation_unit.py::TestSimulationErrorHandling::test_missing_course",
backend/.pytest_cache/v/cache/nodeids:  "tests/test_simulation_unit.py::TestSimulationUtilities::test_handicap_calculation",
backend/.pytest_cache/v/cache/nodeids:  "tests/test_simulation_unit.py::TestSimulationUtilities::test_net_score_calculation",
backend/.pytest_cache/v/cache/nodeids:  "tests/test_simulation_unit.py::TestSimulationUtilities::test_team_formation_validation",
backend/.pytest_cache/v/cache/nodeids:  "tests/test_simulation_unit.py::TestWolfGoatPigSimulation::test_add_players",
backend/.pytest_cache/v/cache/nodeids:  "tests/test_simulation_unit.py::TestWolfGoatPigSimulation::test_captain_rotation",
backend/.pytest_cache/v/cache/nodeids:  "tests/test_simulation_unit.py::TestWolfGoatPigSimulation::test_game_state_serialization",
backend/.pytest_cache/v/cache/nodeids:  "tests/test_simulation_unit.py::TestWolfGoatPigSimulation::test_get_current_captain",
backend/.pytest_cache/v/cache/nodeids:  "tests/test_simulation_unit.py::TestWolfGoatPigSimulation::test_lie_type_determination_with_distance",
backend/.pytest_cache/v/cache/nodeids:  "tests/test_simulation_unit.py::TestWolfGoatPigSimulation::test_partnership_request",
backend/.pytest_cache/v/cache/nodeids:  "tests/test_simulation_unit.py::TestWolfGoatPigSimulation::test_partnership_response",
backend/.pytest_cache/v/cache/nodeids:  "tests/test_simulation_unit.py::TestWolfGoatPigSimulation::test_set_course",
backend/.pytest_cache/v/cache/nodeids:  "tests/test_simulation_unit.py::TestWolfGoatPigSimulation::test_short_game_progression",
backend/.pytest_cache/v/cache/nodeids:  "tests/test_simulation_unit.py::TestWolfGoatPigSimulation::test_shot_simulation",
backend/.pytest_cache/v/cache/nodeids:  "tests/test_simulation_unit.py::TestWolfGoatPigSimulation::test_simulation_initialization",
backend/.pytest_cache/v/cache/nodeids:  "tests/test_simulation_unit.py::TestWolfGoatPigSimulation::test_start_game",
backend/.pytest_cache/v/cache/lastfailed:  "tests/test_simulation_integration.py::TestSimulationIntegration::test_simulation_setup_invalid_players": true,
backend/.pytest_cache/v/cache/lastfailed:  "tests/test_simulation_integration.py::TestSimulationIntegration::test_play_next_shot_without_setup": true,
backend/test_short_game.py:    from app.wolf_goat_pig_simulation import WolfGoatPigSimulation, WGPShotResult
backend/test_short_game.py:        sim = WolfGoatPigSimulation()
backend/test_progression.py:    from app.wolf_goat_pig_simulation import WolfGoatPigSimulation
backend/test_progression.py:        sim = WolfGoatPigSimulation()
backend/test_progression.py:        print("\n🎯 Testing Hole Completion Simulation")
backend/tests/test_models_schemas.py:    Rule, Course, Hole, GameStateModel, SimulationResult,
backend/tests/test_simulation_unit.py:    from app.wolf_goat_pig_simulation import WolfGoatPigSimulation
backend/tests/test_simulation_unit.py:class TestWolfGoatPigSimulation:
backend/tests/test_simulation_unit.py:        sim = WolfGoatPigSimulation()
backend/tests/test_simulation_unit.py:        sim = WolfGoatPigSimulation()
backend/tests/test_simulation_unit.py:        sim = WolfGoatPigSimulation()
backend/tests/test_simulation_unit.py:        sim = WolfGoatPigSimulation()
backend/tests/test_simulation_unit.py:        sim = WolfGoatPigSimulation()
backend/tests/test_simulation_unit.py:        sim = WolfGoatPigSimulation()
backend/tests/test_simulation_unit.py:        sim = WolfGoatPigSimulation()
backend/tests/test_simulation_unit.py:        sim = WolfGoatPigSimulation()
backend/tests/test_simulation_unit.py:        sim = WolfGoatPigSimulation()
backend/tests/test_simulation_unit.py:        sim = WolfGoatPigSimulation()
backend/tests/test_simulation_unit.py:        sim = WolfGoatPigSimulation()
backend/tests/test_simulation_unit.py:        sim = WolfGoatPigSimulation()
backend/tests/test_simulation_unit.py:class TestSimulationUtilities:
backend/tests/test_simulation_unit.py:class TestSimulationErrorHandling:
backend/tests/test_simulation_unit.py:            WolfGoatPigSimulation(player_count=3)
backend/tests/test_simulation_unit.py:        sim = WolfGoatPigSimulation()
backend/tests/test_simulation_unit.py:        sim = WolfGoatPigSimulation()
backend/tests/test_simulation_unit.py:    print("🧪 Simulation Unit Tests")
backend/tests/test_simulation_unit.py:        print("⚠️ Simulation components not available for testing")
backend/tests/test_simulation_unit.py:        TestWolfGoatPigSimulation,
backend/tests/test_simulation_unit.py:        TestSimulationUtilities,
backend/tests/test_simulation_unit.py:        TestSimulationErrorHandling,
backend/tests/test_monte_carlo.py:    SimulationParams,
backend/tests/test_monte_carlo.py:    SimulationResult,
backend/tests/test_monte_carlo.py:        valid_params = SimulationParams(
backend/tests/test_monte_carlo.py:        default_params = SimulationParams()
backend/tests/test_monte_carlo.py:        params = SimulationParams(num_simulations=5000, use_parallel=False)
backend/tests/test_monte_carlo.py:        params = SimulationParams(
backend/tests/test_monte_carlo.py:        self.assertLess(total_time, 50, f"Simulation took {total_time:.1f}ms, should be under 50ms")
backend/tests/test_monte_carlo.py:        params = SimulationParams(num_simulations=1000, use_parallel=False)
backend/tests/test_monte_carlo.py:        params = SimulationParams(num_simulations=2000, confidence_level=0.95)
backend/tests/test_monte_carlo.py:        params = SimulationParams(num_simulations=1000)
backend/tests/test_monte_carlo.py:        params_parallel = SimulationParams(num_simulations=1000, use_parallel=True, num_threads=2)
backend/tests/test_monte_carlo.py:        params_sequential = SimulationParams(num_simulations=1000, use_parallel=False)
backend/tests/test_monte_carlo.py:        params = SimulationParams(
backend/tests/test_monte_carlo.py:        minimal_params = SimulationParams(num_simulations=10)
backend/tests/test_monte_carlo.py:        self.assertIsInstance(minimal_result, SimulationResult)
backend/tests/test_monte_carlo.py:        self.assertIsInstance(single_result, SimulationResult)
backend/tests/test_monte_carlo.py:        params = SimulationParams(num_simulations=2000, use_parallel=False)
backend/tests/test_monte_carlo.py:        self.assertIsInstance(result, SimulationResult)
backend/tests/test_monte_carlo.py:        self.assertIsInstance(result, SimulationResult)
backend/tests/simulation/test_simulation_scenarios.py:class WolfGoatPigSimulationTester:
backend/tests/simulation/test_simulation_scenarios.py:class SimulationScenarios:
backend/tests/simulation/test_simulation_scenarios.py:class TestSimulationMode:
backend/tests/simulation/test_simulation_scenarios.py:        return WolfGoatPigSimulationTester()
backend/tests/simulation/test_simulation_scenarios.py:        scenario = SimulationScenarios.aggressive_captain_solo()
backend/tests/simulation/test_simulation_scenarios.py:        scenario = SimulationScenarios.partnership_acceptance()
backend/tests/simulation/test_simulation_scenarios.py:        tester = WolfGoatPigSimulationTester()
backend/tests/simulation/test_simulation_scenarios.py:        scenario = SimulationScenarios.partnership_acceptance()
backend/tests/simulation/__init__.py:"""Simulation test subpackage for backend suite."""
Binary file backend/tests/simulation/__pycache__/test_simulation_scenarios.cpython-313-pytest-8.4.1.pyc matches
Binary file backend/tests/simulation/__pycache__/test_simulation_scenarios.cpython-313-pytest-8.4.2.pyc matches
Binary file backend/tests/simulation/__pycache__/test_simulation_scenarios.cpython-312-pytest-8.4.2.pyc matches
Binary file backend/tests/simulation/__pycache__/__init__.cpython-312.pyc matches
Binary file backend/tests/simulation/__pycache__/__init__.cpython-313.pyc matches
Binary file backend/tests/__pycache__/test_monte_carlo.cpython-313-pytest-8.4.1.pyc matches
Binary file backend/tests/__pycache__/test_simulation_endpoints.cpython-313-pytest-8.4.1.pyc matches
Binary file backend/tests/__pycache__/test_monte_carlo.cpython-313-pytest-8.4.2.pyc matches
Binary file backend/tests/__pycache__/test_performance.cpython-312-pytest-8.4.2.pyc matches
Binary file backend/tests/__pycache__/test_simulation_endpoints.cpython-313-pytest-8.4.2.pyc matches
Binary file backend/tests/__pycache__/test_simulation_integration.cpython-313-pytest-8.4.2.pyc matches
Binary file backend/tests/__pycache__/test_bootstrapping.cpython-312-pytest-8.4.2.pyc matches
Binary file backend/tests/__pycache__/test_simulation_integration.cpython-313-pytest-8.4.1.pyc matches
Binary file backend/tests/__pycache__/test_performance.cpython-313-pytest-8.4.1.pyc matches
Binary file backend/tests/__pycache__/test_simulation_endpoints.cpython-312-pytest-8.4.2.pyc matches
Binary file backend/tests/__pycache__/test_performance.cpython-313-pytest-8.4.2.pyc matches
Binary file backend/tests/__pycache__/test_monte_carlo.cpython-312-pytest-8.4.2.pyc matches
Binary file backend/tests/__pycache__/test_simulation_integration.cpython-312-pytest-8.4.2.pyc matches
Binary file backend/tests/__pycache__/test_simulation_integration.cpython-313.pyc matches
Binary file backend/tests/__pycache__/test_bootstrapping.cpython-313-pytest-8.4.1.pyc matches
Binary file backend/tests/__pycache__/test_bootstrapping.cpython-313-pytest-8.4.2.pyc matches
Binary file backend/tests/__pycache__/test_models_schemas.cpython-312-pytest-8.4.2.pyc matches
Binary file backend/tests/__pycache__/test_simulation_unit.cpython-312-pytest-8.4.2.pyc matches
Binary file backend/tests/__pycache__/test_models_schemas.cpython-313-pytest-8.4.2.pyc matches
Binary file backend/tests/__pycache__/test_simulation_uni