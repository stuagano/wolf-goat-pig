diff --git a/.code/agents/ca0c9452-fbf5-4e5e-bf54-a8d7e9557957/result.txt b/.code/agents/ca0c9452-fbf5-4e5e-bf54-a8d7e9557957/result.txt
new file mode 100644
index 00000000..1fc5171c
--- /dev/null
+++ b/.code/agents/ca0c9452-fbf5-4e5e-bf54-a8d7e9557957/result.txt
@@ -0,0 +1,119 @@
+Perfect! Now I understand the structure. Let me create a proposed patch with the following changes:
+
+1. Change ENABLE_TEST_ENDPOINTS default from "true" to "false"
+2. Add a `require_admin` helper function near the flag
+3. Gate `/simulation/state` via flag + admin check
+4. Add admin requirement to `/simulation/test/seed-state` 
+5. Move `/test-deployment` and `/debug/paths` under the flag with admin requirement
+
+Here's the proposed patch:
+
+## Proposed Patch
+
+```diff
+--- a/backend/app/main.py
++++ b/backend/app/main.py
+@@ -138,7 +138,20 @@
+     redoc_url="/redoc" if os.getenv("ENVIRONMENT") != "production" else None
+ )
+ 
+-ENABLE_TEST_ENDPOINTS = os.getenv("ENABLE_TEST_ENDPOINTS", "true").lower() in {"1", "true", "yes"}
++ENABLE_TEST_ENDPOINTS = os.getenv("ENABLE_TEST_ENDPOINTS", "false").lower() in {"1", "true", "yes"}
++
++def require_admin(x_admin_email: str = Header(None)):
++    """
++    Helper to require admin access for sensitive endpoints.
++    Raises HTTPException(403) if admin email is not provided or not in the allowed list.
++    """
++    admin_emails = ['stuagano@gmail.com', 'admin@wgp.com']
++    if not x_admin_email or x_admin_email not in admin_emails:
++        raise HTTPException(status_code=403, detail="Admin access required")
++    return x_admin_email
+ 
+ # Database initialization moved to main startup handler
+ 
+@@ -4604,7 +4617,7 @@
+ if ENABLE_TEST_ENDPOINTS:
+ 
+     @app.post("/simulation/test/seed-state")
+-    def seed_simulation_state(payload: SimulationSeedRequest):
++    def seed_simulation_state(payload: SimulationSeedRequest, admin_email: str = Depends(require_admin)):
+         """Testing-only helper for seeding the current simulation state.
+ 
+         Allows BDD and backend tests to manipulate the in-memory simulation using
+@@ -4724,8 +4737,11 @@
+         }
+ 
+ 
+-@app.get("/simulation/state")
+-def get_simulation_state():
++if ENABLE_TEST_ENDPOINTS:
++
++    @app.get("/simulation/state")
++    def get_simulation_state(admin_email: str = Depends(require_admin)):
++        """Return the current simulation state for diagnostics and testing."""
+     """Return the current simulation state for diagnostics and testing."""
+     global wgp_simulation
+ 
+@@ -4738,6 +4754,7 @@
+         logger.error(f"Failed to fetch simulation state: {exc}")
+         raise HTTPException(status_code=500, detail="Failed to fetch simulation state")
+ 
++
+ @app.get("/simulation/available-personalities")
+ def get_available_personalities():
+     """Get list of available AI personality types"""
+@@ -6827,15 +6844,20 @@
+             db.close()
+ 
+ # Simple test endpoint  
+-@app.get("/test-deployment")
+-async def test_deployment():
+-    """Test that new deployments are working"""
+-    return {"message": "Deployment is working", "timestamp": datetime.now().isoformat()}
++if ENABLE_TEST_ENDPOINTS:
++
++    @app.get("/test-deployment")
++    async def test_deployment(admin_email: str = Depends(require_admin)):
++        """Test that new deployments are working"""
++        return {"message": "Deployment is working", "timestamp": datetime.now().isoformat()}
+ 
+-# Debug endpoint to check paths
+-@app.get("/debug/paths")
+-async def debug_paths():
+-    """Debug endpoint to check file paths"""
++    # Debug endpoint to check paths
++    @app.get("/debug/paths")
++    async def debug_paths(admin_email: str = Depends(require_admin)):
++        """Debug endpoint to check file paths"""
++        current_file = Path(__file__).resolve()
++        static_dir = STATIC_DIR.resolve()
++        index_file = static_dir / "index.html"
+     current_file = Path(__file__).resolve()
+     static_dir = STATIC_DIR.resolve()
+     index_file = static_dir / "index.html"
+@@ -6849,6 +6871,7 @@
+         "static_dir_contents": list(static_dir.iterdir()) if static_dir.exists() else []
+     }
+ 
++
+ # Mount static files if build directory exists
+ static_assets_dir = STATIC_DIR / "static"
+```
+
+## Summary of Changes
+
+**backend/app/main.py:**
+
+1. **Line 141**: Changed `ENABLE_TEST_ENDPOINTS` default from `"true"` to `"false"` for production safety
+2. **Lines 143-154**: Added `require_admin()` helper function that validates the `x-admin-email` header against a whitelist
+3. **Line 4620**: Added admin requirement to `/simulation/test/seed-state` endpoint via `Depends(require_admin)`
+4. **Lines 4740-4743**: Wrapped `/simulation/state` endpoint inside `if ENABLE_TEST_ENDPOINTS:` block and added admin requirement
+5. **Lines 6847-6860**: Wrapped `/test-deployment` endpoint inside `if ENABLE_TEST_ENDPOINTS:` block and added admin requirement
+6. **Lines 6855-6872**: Wrapped `/debug/paths` endpoint inside `if ENABLE_TEST_ENDPOINTS:` block and added admin requirement
+
+These changes ensure that:
+- Test endpoints are disabled by default in production
+- All diagnostic/test endpoints require admin authentication
+- The authentication mechanism is consistent across all protected endpoints
+- Changes are minimal and leverage existing patterns from the codebase
diff --git a/.code/agents/f612d6fb-95f2-4bdf-852e-29add50c6b2e/result.txt b/.code/agents/f612d6fb-95f2-4bdf-852e-29add50c6b2e/result.txt
new file mode 100644
index 00000000..9933a3a2
--- /dev/null
+++ b/.code/agents/f612d6fb-95f2-4bdf-852e-29add50c6b2e/result.txt
@@ -0,0 +1,510 @@
+[2025-10-20T16:36:03] OpenAI Codex v0.0.0 (research preview)
+--------
+workdir: /Users/stuartgano/.code/working/wolf-goat-pig/branches/code-code-update-backend-app-main-py-enable-test-e
+model: gpt-5-codex
+provider: openai
+approval: never
+sandbox: read-only
+reasoning effort: medium
+reasoning summaries: auto
+--------
+[2025-10-20T16:36:03] User instructions:
+Update backend/app/main.py so ENABLE_TEST_ENDPOINTS defaults to "false", introduce require_admin helper near the flag, gate /simulation/state via flag+admin, require admin for /simulation/test/seed-state, and move /test-deployment and /debug/paths under the flag with admin requirement. Keep changes minimal.
+
+Desired output: Proposed patch
+
+Files to consider: backend/app/main.py
+[2025-10-20T16:36:05] OpenAI Codex v0.0.0 (research preview)
+--------
+workdir: /Users/stuartgano/.code/working/wolf-goat-pig/branches/code-code-update-backend-app-main-py-enable-test-e
+model: gpt-5-codex
+provider: openai
+approval: never
+sandbox: read-only
+reasoning effort: medium
+reasoning summaries: auto
+--------
+[2025-10-20T16:36:05] User instructions:
+Update backend/app/main.py so ENABLE_TEST_ENDPOINTS defaults to "false", introduce require_admin helper near the flag, gate /simulation/state via flag+admin, require admin for /simulation/test/seed-state, and move /test-deployment and /debug/paths under the flag with admin requirement. Keep changes minimal.
+
+Desired output: Proposed patch
+
+Files to consider: backend/app/main.py
+
+[2025-10-20T16:36:09] thinking
+
+**Planning patch proposal in read-only sandbox**
+[2025-10-20T16:36:11] exec bash -lc "sed -n '1,200p' backend/app/main.py" in /Users/stuartgano/.code/working/wolf-goat-pig/branches/code-code-update-backend-app-main-py-enable-test-e
+[2025-10-20T16:36:12] bash -lc "sed -n '1,200p' backend/app/main.py" succeeded in 859ms:
+ðŸŽ¯ ADK auto-sync aliases loaded!
+ðŸ’¡ Use 'sync' to sync with upstream anytime
+ðŸ’¡ Use 'synccheck' to check sync status
+from fastapi import FastAPI, Depends, Body, HTTPException, Request, Path, Query, UploadFile, File, Header
+from sqlalchemy.orm import Session
+from sqlalchemy import text
+from fastapi.middleware.cors import CORSMiddleware
+from fastapi.middleware.trustedhost import TrustedHostMiddleware
+from fastapi.responses import JSONResponse, FileResponse, HTMLResponse
+from fastapi.staticfiles import StaticFiles
+from . import models, schemas, crud, database
+
+from .game_state import game_state
+from .wolf_goat_pig_simulation import WolfGoatPigSimulation, WGPPlayer, BallPosition, TeamFormation
+from .post_hole_analytics import PostHoleAnalyzer
+from .simulation_timeline_enhancements import (
+    enhance_simulation_with_timeline, 
+    format_poker_betting_state, 
+    create_betting_options
+)
+[2025-10-20T16:36:12] tokens used: 7,783
+
+[2025-10-20T16:36:14] thinking
+
+**Continuing to locate admin requirements**
+[2025-10-20T16:36:14] exec bash -lc "sed -n '200,400p' backend/app/main.py" in /Users/stuartgano/.code/working/wolf-goat-pig/branches/code-code-update-backend-app-main-py-enable-test-e
+[2025-10-20T16:36:15] bash -lc "sed -n '200,400p' backend/app/main.py" succeeded in 952ms:
+ðŸŽ¯ ADK auto-sync aliases loaded!
+ðŸ’¡ Use 'sync' to sync with upstream anytime
+ðŸ’¡ Use 'synccheck' to check sync status
+    logger.error(f"HTTP exception: {exc.status_code} - {exc.detail}")
+    # Add logging for host header during exceptions
+    logger.error(f"Request Host header: {request.headers.get('host')}")
+    logger.error(f"Request Client host: {request.client.host}")
+    return JSONResponse(
+        status_code=exc.status_code,
+        content={"error": "HTTP error", "detail": exc.detail}
+    )
+
+@app.exception_handler(Exception)
+async def global_exception_handler(request: Request, exc: Exception):
+    logger.error(f"Unhandled exception: {exc}")
+    logger.error(traceback.format_exc())
+    return JSONResponse(
+        status_code=500,
+        content={"error": "Internal server error", "detail": str(exc)}
+    )
+[2025-10-20T16:36:15] tokens used: 10,921
+
+[2025-10-20T16:36:18] thinking
+
+**Searching for relevant endpoints**
+[2025-10-20T16:36:19] exec bash -lc 'rg -n "simulation" backend/app/main.py' in /Users/stuartgano/.code/working/wolf-goat-pig/branches/code-code-update-backend-app-main-py-enable-test-e
+[2025-10-20T16:36:20] bash -lc 'rg -n "simulation" backend/app/main.py' exited 127 in 906ms:
+ðŸŽ¯ ADK auto-sync aliases loaded!
+ðŸ’¡ Use 'sync' to sync with upstream anytime
+ðŸ’¡ Use 'synccheck' to check sync status
+
+ERROR
+bash: rg: command not found
+[2025-10-20T16:36:20] tokens used: 14,104
+
+[2025-10-20T16:36:21] thinking
+
+**Selecting grep over rg**
+[2025-10-20T16:36:22] exec bash -lc 'grep -n "simulation" backend/app/main.py' in /Users/stuartgano/.code/working/wolf-goat-pig/branches/code-code-update-backend-app-main-py-enable-test-e
+[2025-10-20T16:36:23] bash -lc 'grep -n "simulation" backend/app/main.py' succeeded in 820ms:
+ðŸŽ¯ ADK auto-sync aliases loaded!
+ðŸ’¡ Use 'sync' to sync with upstream anytime
+ðŸ’¡ Use 'synccheck' to check sync status
+11:from .wolf_goat_pig_simulation import WolfGoatPigSimulation, WGPPlayer, BallPosition, TeamFormation
+13:from .simulation_timeline_enhancements import (
+14:    enhance_simulation_with_timeline, 
+50:wgp_simulation = WolfGoatPigSimulation(player_count=4)
+115:        None, description="Hole number to switch the active simulation to"
+135:    description="A comprehensive golf betting simulation API with unified Action API",
+298:        # Verify simulation can be created
+299:        logger.info("ðŸ”§ Verifying simulation initialization...")
+301:            # Test creating a basic simulation
+308:            test_simulation = WolfGoatPigSimulation(player_count=4)
+514:            # Test basic simulation creation
+515:            test_simulation = WolfGoatPigSimulation(player_count=4)
+516:            health_status["components"]["simulation"] = {
+522:            health_status["components"]["simulation"] = {
+975:        simulation_state = wgp_simulation.get_game_state()
+976:        if isinstance(simulation_state, dict):
+977:            captain = simulation_state.get("captain_id") or simulation_state.get("captain")
+[2025-10-20T16:36:23] tokens used: 14,365
+
+[2025-10-20T16:36:25] thinking
+
+**Searching for deployment and debug endpoints**
+[2025-10-20T16:36:26] exec bash -lc 'grep -n "test-deployment" backend/app/main.py' in /Users/stuartgano/.code/working/wolf-goat-pig/branches/code-code-update-backend-app-main-py-enable-test-e
+[2025-10-20T16:36:27] bash -lc 'grep -n "test-deployment" backend/app/main.py' succeeded in 844ms:
+ðŸŽ¯ ADK auto-sync aliases loaded!
+ðŸ’¡ Use 'sync' to sync with upstream anytime
+ðŸ’¡ Use 'synccheck' to check sync status
+6830:@app.get("/test-deployment")
+[2025-10-20T16:36:27] tokens used: 19,826
+[2025-10-20T16:36:30] exec bash -lc "sed -n '6800,6900p' backend/app/main.py" in /Users/stuartgano/.code/working/wolf-goat-pig/branches/code-code-update-backend-app-main-py-enable-test-e
+[2025-10-20T16:36:30] bash -lc "sed -n '6800,6900p' backend/app/main.py" succeeded in 921ms:
+ðŸŽ¯ ADK auto-sync aliases loaded!
+ðŸ’¡ Use 'sync' to sync with upstream anytime
+ðŸ’¡ Use 'synccheck' to check sync status
+                except Exception as e:
+                    logger.error(f"Failed to send notification for match {match.id}: {e}")
+                    notifications_sent.append({
+                        "match_id": match.id,
+                        "players": [p["player_name"] for p in match_data["players"]],
+                        "status": "failed",
+                        "error": str(e)
+                    })
+                    
+            except Exception as e:
+                logger.error(f"Error creating match: {e}")
+                continue
+        
+        return {
+            "matches_found": matches_response["total_matches_found"],
+            "matches_created": len(saved_matches),
+            "notifications_sent": len([n for n in notifications_sent if n["status"] == "sent"]),
+[2025-10-20T16:36:30] tokens used: 20,456
+
+[2025-10-20T16:36:34] thinking
+
+**Searching for require_admin definitions**
+[2025-10-20T16:36:38] exec bash -lc 'grep -n "require_admin" -n backend/app/main.py' in /Users/stuartgano/.code/working/wolf-goat-pig/branches/code-code-update-backend-app-main-py-enable-test-e
+[2025-10-20T16:36:39] bash -lc 'grep -n "require_admin" -n backend/app/main.py' exited 1 in 948ms:
+ðŸŽ¯ ADK auto-sync aliases loaded!
+ðŸ’¡ Use 'sync' to sync with upstream anytime
+ðŸ’¡ Use 'synccheck' to check sync status
+
+ERROR
+[2025-10-20T16:36:39] tokens used: 22,181
+
+[2025-10-20T16:36:41] thinking
+
+**Investigating admin requirement implementation**
+[2025-10-20T16:36:42] exec bash -lc 'grep -n "X-Admin" backend/app/main.py' in /Users/stuartgano/.code/working/wolf-goat-pig/branches/code-code-update-backend-app-main-py-enable-test-e
+[2025-10-20T16:36:43] bash -lc 'grep -n "X-Admin" backend/app/main.py' succeeded in 844ms:
+ðŸŽ¯ ADK auto-sync aliases loaded!
+ðŸ’¡ Use 'sync' to sync with upstream anytime
+ðŸ’¡ Use 'synccheck' to check sync status
+186:        "X-Admin-Email",
+[2025-10-20T16:36:43] tokens used: 23,033
+
+[2025-10-20T16:36:45] thinking
+
+**Searching for admin-related logic**
+[2025-10-20T16:36:46] exec bash -lc 'grep -n "admin" backend/app/main.py' in /Users/stuartgano/.code/working/wolf-goat-pig/branches/code-code-update-backend-app-main-py-enable-test-e
+[2025-10-20T16:36:47] bash -lc 'grep -n "admin" backend/app/main.py' succeeded in 825ms:
+ðŸŽ¯ ADK auto-sync aliases loaded!
+ðŸ’¡ Use 'sync' to sync with upstream anytime
+ðŸ’¡ Use 'synccheck' to check sync status
+3593:@app.get("/admin/email-config")
+3594:def get_email_config(x_admin_email: str = Header(None)):
+3595:    """Get current email configuration (admin only)"""
+3596:    # Check admin access
+3597:    admin_emails = ['stuagano@gmail.com', 'admin@wgp.com']
+3598:    if not x_admin_email or x_admin_email not in admin_emails:
+3614:@app.post("/admin/email-config")
+3615:def update_email_config(config: Dict[str, Any], x_admin_email: str = Header(None)):
+3616:    """Update email configuration (admin only)"""
+3617:    # Check admin access
+3618:    admin_emails = ['stuagano@gmail.com', 'admin@wgp.com']
+3619:    if not x_admin_email or x_admin_email not in admin_emails:
+3646:@app.post("/admin/test-email")
+3647:async def test_admin_email(request: Dict[str, Any], x_admin_email: str = Header(None)):
+3648:    """Send a test email with provided configuration (admin only)"""
+3649:    # Check admin access
+3650:    admin_emails = ['stuagano@gmail.com', 'admin@wgp.com']
+[2025-10-20T16:36:47] tokens used: 23,302
+
+[2025-10-20T16:36:51] thinking
+
+**Searching for Path import**
+[2025-10-20T16:36:52] exec bash -lc 'grep -n "from pathlib import Path" backend/app/main.py' in /Users/stuartgano/.code/working/wolf-goat-pig/branches/code-code-update-backend-app-main-py-enable-test-e
+[2025-10-20T16:36:53] bash -lc 'grep -n "from pathlib import Path" backend/app/main.py' succeeded in 1.06s:
+ðŸŽ¯ ADK auto-sync aliases loaded!
+ðŸ’¡ Use 'sync' to sync with upstream anytime
+ðŸ’¡ Use 'synccheck' to check sync status
+6621:from pathlib import Path
+[2025-10-20T16:36:53] tokens used: 24,478
+
+[2025-10-20T16:37:01] thinking
+
+**Analyzing admin gating and imports**
+[2025-10-20T16:37:02] exec bash -lc "sed -n '6560,6700p' backend/app/main.py" in /Users/stuartgano/.code/working/wolf-goat-pig/branches/code-code-update-backend-app-main-py-enable-test-e
+[2025-10-20T16:37:03] bash -lc "sed -n '6560,6700p' backend/app/main.py" succeeded in 853ms:
+ðŸŽ¯ ADK auto-sync aliases loaded!
+ðŸ’¡ Use 'sync' to sync with upstream anytime
+ðŸ’¡ Use 'synccheck' to check sync status
+            )
+        
+        success = email_service.send_weekly_summary(
+            to_email=email_data['to_email'],
+            player_name=email_data['player_name'],
+            summary_data=email_data.get('summary_data', {})
+        )
+        
+        if success:
+            return {"message": "Weekly summary email sent", "to_email": email_data['to_email']}
+        else:
+            raise HTTPException(status_code=500, detail="Failed to send weekly summary email")
+            
+    except HTTPException:
+        raise
+
+@app.post("/email/initialize-scheduler")
+[2025-10-20T16:37:03] tokens used: 24,995
+
+[2025-10-20T16:37:12] thinking
+
+**Planning admin helper insertion**
+[2025-10-20T16:37:13] exec bash -lc 'grep -n "ENABLE_TEST_ENDPOINTS" backend/app/main.py' in /Users/stuartgano/.code/working/wolf-goat-pig/branches/code-code-update-backend-app-main-py-enable-test-e
+[2025-10-20T16:37:14] bash -lc 'grep -n "ENABLE_TEST_ENDPOINTS" backend/app/main.py' succeeded in 1.04s:
+ðŸŽ¯ ADK auto-sync aliases loaded!
+ðŸ’¡ Use 'sync' to sync with upstream anytime
+ðŸ’¡ Use 'synccheck' to check sync status
+141:ENABLE_TEST_ENDPOINTS = os.getenv("ENABLE_TEST_ENDPOINTS", "true").lower() in {"1", "true", "yes"}
+4604:if ENABLE_TEST_ENDPOINTS:
+[2025-10-20T16:37:14] tokens used: 26,877
+
+[2025-10-20T16:37:22] thinking
+
+**Updating test endpoint authorization**
+[2025-10-20T16:37:23] exec bash -lc "sed -n '4580,4750p' backend/app/main.py" in /Users/stuartgano/.code/working/wolf-goat-pig/branches/code-code-update-backend-app-main-py-enable-test-e
+[2025-10-20T16:37:24] bash -lc "sed -n '4580,4750p' backend/app/main.py" succeeded in 1.07s:
+ðŸŽ¯ ADK auto-sync aliases loaded!
+ðŸ’¡ Use 'sync' to sync with upstream anytime
+ðŸ’¡ Use 'synccheck' to check sync status
+            if pending_request:
+                interaction_needed = {
+                    "type": "partnership_response",
+                    "requested_partner": pending_request.get("requested"),
+                    "captain_id": pending_request.get("captain")
+                }
+        
+        return {
+            "success": True,
+            "result": result,
+            "game_state": updated_state,
+            "interaction_needed": interaction_needed,
+            "hole_complete": updated_state.get("hole_complete", False)
+        }
+        
+    except HTTPException:
+        raise
+[2025-10-20T16:37:24] tokens used: 27,485
+
+[2025-10-20T16:37:42] thinking
+
+**Organizing test endpoints with gating and admin checks**
+
+Iâ€™m sorting out how to properly gate the `/simulation/state`, `/test-deployment`, and `/debug/paths` endpoints behind the `ENABLE_TEST_ENDPOINTS` flag and require admin access. That means moving some endpoint definitions inside the `if ENABLE_TEST_ENDPOINTS:` block and applying the `require_admin` decorator to them, while keeping helper functions like `require_admin` accessible outside that block. Since multiple coordinated changes are needed, Iâ€™m considering a sequential plan to make sure everything stays organized and minimal.
+[2025-10-20T16:37:44] tool sequential-thinking.sequentialthinking({"thought":"Need to devise edits to meet requirements: change flag default, add require_admin helper, adjust endpoints. Estimate 4 thoughts.","thoughtNumber":1,"totalThoughts":4,"nextThoughtNeeded":true,"isRevision":false,"needsMoreThoughts":false})
+[2025-10-20T16:37:44] sequential-thinking.sequentialthinking({"thought":"Need to devise edits to meet requirements: change flag default, add require_admin helper, adjust endpoints. Estimate 4 thoughts.","thoughtNumber":1,"totalThoughts":4,"nextThoughtNeeded":true,"isRevision":false,"needsMoreThoughts":false}) success in 5ms:
+{
+  "content": [
+    {
+      "text": "{\n  \"thoughtNumber\": 1,\n  \"totalThoughts\": 4,\n  \"nextThoughtNeeded\": true,\n  \"branches\": [],\n  \"thoughtHistoryLength\": 1\n}",
+      "type": "text"
+    }
+  ]
+}
+[2025-10-20T16:37:44] tokens used: 30,910
+
+[2025-10-20T16:37:46] thinking
+
+**Waiting for next input**
+[2025-10-20T16:37:48] tool sequential-thinking.sequentialthinking({"thought":"Identify current locations: flag defined near top default true; `if ENABLE_TEST_ENDPOINTS` block wraps seed endpoint only; `/simulation/state` outside; `/test-deployment` etc near bottom. Need to adjust definitions to use helper and gating.","thoughtNumber":2,"totalThoughts":4,"nextThoughtNeeded":true,"isRevision":false,"needsMoreThoughts":false})
+[2025-10-20T16:37:48] sequential-thinking.sequentialthinking({"thought":"Identify current locations: flag defined near top default true; `if ENABLE_TEST_ENDPOINTS` block wraps seed endpoint only; `/simulation/state` outside; `/test-deployment` etc near bottom. Need to adjust definitions to use helper and gating.","thoughtNumber":2,"totalThoughts":4,"nextThoughtNeeded":true,"isRevision":false,"needsMoreThoughts":false}) success in 0ms:
+{
+  "content": [
+    {
+      "text": "{\n  \"thoughtNumber\": 2,\n  \"totalThoughts\": 4,\n  \"nextThoughtNeeded\": true,\n  \"branches\": [],\n  \"thoughtHistoryLength\": 2\n}",
+      "type": "text"
+    }
+  ]
+}
+[2025-10-20T16:37:48] tokens used: 31,226
+
+[2025-10-20T16:37:50] thinking
+
+**Proceeding to next step**
+[2025-10-20T16:37:54] tool sequential-thinking.sequentialthinking({"thought":"Plan modifications: 1) update flag default to \"false\" and add SET of admin emails plus helper require_admin raising HTTPException 403; 2) Update `if ENABLE_TEST_ENDPOINTS` block to include both `/simulation/test/seed-state` and new gated `/simulation/state` by moving endpoint inside block, adding header parameter and helper call; 3) Wrap bottom endpoints `/test-deployment` & `/debug/paths` inside `if ENABLE_TEST_ENDPOINTS:` with header param & helper call; ensure retains access to `Path` imports. Minimal change: maybe restructure block to avoid duplication, ensure static routes still accessible when flag false? note: static mount should remain accessible. Need to ensure duplicates of admin emails? Could reuse existing lists but for minimal change maybe define `ADMIN_EMAILS` constant near helper and use there, but not update other endpoints; it's acceptable though they might not use constant? to avoid bigger change maybe we share constant but keep existing repeated definitions? using new constant but not used elsewhere ok though more consistent. Should we set to same addresses to avoid mismatch. We'll set `ADMIN_EMAILS = { ... }` near flag.","thoughtNumber":3,"totalThoughts":4,"nextThoughtNeeded":true,"isRevision":false,"needsMoreThoughts":false})
+[2025-10-20T16:37:54] sequential-thinking.sequentialthinking({"thought":"Plan modifications: 1) update flag default to \"false\" and add SET of admin emails plus helper require_admin raising HTTPException 403; 2) Update `if ENABLE_TEST_ENDPOINTS` block to include both `/simulation/test/seed-state` and new gated `/simulation/state` by moving endpoint inside block, adding header parameter and helper call; 3) Wrap bottom endpoints `/test-deployment` & `/debug/paths` inside `if ENABLE_TEST_ENDPOINTS:` with header param & helper call; ensure retains access to `Path` imports. Minimal change: maybe restructure block to avoid duplication, ensure static routes still accessible when flag false? note: static mount should remain accessible. Need to ensure duplicates of admin emails? Could reuse existing lists but for minimal change maybe define `ADMIN_EMAILS` constant near helper and use there, but not update other endpoints; it's acceptable though they might not use constant? to avoid bigger change maybe we share constant but keep existing repeated definitions? using new constant but not used elsewhere ok though more consistent. Should we set to same addresses to avoid mismatch. We'll set `ADMIN_EMAILS = { ... }` near flag.","thoughtNumber":3,"totalThoughts":4,"nextThoughtNeeded":true,"isRevision":false,"needsMoreThoughts":false}) success in 0ms:
+{
+  "content": [
+    {
+      "text": "{\n  \"thoughtNumber\": 3,\n  \"totalThoughts\": 4,\n  \"nextThoughtNeeded\": true,\n  \"branches\": [],\n  \"thoughtHistoryLength\": 3\n}",
+      "type": "text"
+    }
+  ]
+}
+[2025-10-20T16:37:55] tokens used: 32,292
+
+[2025-10-20T16:37:56] thinking
+
+**Finishing verification step**
+[2025-10-20T16:37:58] tool sequential-thinking.sequentialthinking({"thought":"Double-check for dependencies: require_admin uses HTTPException from FastAPI already imported; ensure Optional imported; header param to functions as `x_admin_email: Optional[str] = Header(None)`; require_admin call before logic; restructure `if ENABLE_TEST_ENDPOINTS` to maybe contain doc. Provide patch accordingly.","thoughtNumber":4,"totalThoughts":4,"nextThoughtNeeded":false,"isRevision":false,"needsMoreThoughts":false})
+[2025-10-20T16:37:58] sequential-thinking.sequentialthinking({"thought":"Double-check for dependencies: require_admin uses HTTPException from FastAPI already imported; ensure Optional imported; header param to functions as `x_admin_email: Optional[str] = Header(None)`; require_admin call before logic; restructure `if ENABLE_TEST_ENDPOINTS` to maybe contain doc. Provide patch accordingly.","thoughtNumber":4,"totalThoughts":4,"nextThoughtNeeded":false,"isRevision":false,"needsMoreThoughts":false}) success in 0ms:
+{
+  "content": [
+    {
+      "text": "{\n  \"thoughtNumber\": 4,\n  \"totalThoughts\": 4,\n  \"nextThoughtNeeded\": false,\n  \"branches\": [],\n  \"thoughtHistoryLength\": 4\n}",
+      "type": "text"
+    }
+  ]
+}
+[2025-10-20T16:37:58] tokens used: 33,549
+
+[2025-10-20T16:38:50] thinking
+
+**Constructing detailed patch**
+
+I'm carefully crafting a unified diff patch that revises the enable-test flag default, adds admin email checks and helper, moves and updates simulation endpoints inside the conditional block with proper indentation and admin checks, and relocates the test-deployment and debug endpoints similarly while preserving existing logic and imports.
+[2025-10-20T16:38:52] codex
+
+Hereâ€™s the proposed patch for `backend/app/main.py` applying your requested changes:
+
+```diff
+diff --git a/backend/app/main.py b/backend/app/main.py
+index e8de6bb..1c9f5a9 100644
+--- a/backend/app/main.py
++++ b/backend/app/main.py
+@@
+ app = FastAPI(
+     title="Wolf Goat Pig Golf Simulation API",
+     description="A comprehensive golf betting simulation API with unified Action API",
+     version="1.0.0",
+     docs_url="/docs" if os.getenv("ENVIRONMENT") != "production" else None,
+     redoc_url="/redoc" if os.getenv("ENVIRONMENT") != "production" else None
+ )
+ 
+-ENABLE_TEST_ENDPOINTS = os.getenv("ENABLE_TEST_ENDPOINTS", "true").lower() in {"1", "true", "yes"}
++ENABLE_TEST_ENDPOINTS = os.getenv("ENABLE_TEST_ENDPOINTS", "false").lower() in {"1", "true", "yes"}
++ADMIN_EMAILS = {"stuagano@gmail.com", "admin@wgp.com"}
++
++
++def require_admin(x_admin_email: Optional[str]) -> None:
++    if not x_admin_email or x_admin_email not in ADMIN_EMAILS:
++        raise HTTPException(status_code=403, detail="Admin privileges required")
+ 
+ # Database initialization moved to main startup handler
+ 
+ # Trusted host middleware for security
+ # Temporarily disable TrustedHostMiddleware during development/testing for easier debugging
+@@
+ if ENABLE_TEST_ENDPOINTS:
+ 
+     @app.post("/simulation/test/seed-state")
+-    def seed_simulation_state(payload: SimulationSeedRequest):
++    def seed_simulation_state(
++        payload: SimulationSeedRequest,
++        x_admin_email: Optional[str] = Header(None),
++    ):
+         """Testing-only helper for seeding the current simulation state.
+ 
+         Allows BDD and backend tests to manipulate the in-memory simulation using
+         the public HTTP API instead of reaching into the global simulation object.
+         """
+ 
+         global wgp_simulation
+ 
++        require_admin(x_admin_email)
++
+         if not wgp_simulation:
+             raise HTTPException(status_code=400, detail="Simulation not initialized. Call /simulation/setup first.")
+ 
+         if payload.current_hole is not None:
+             if payload.current_hole not in wgp_simulation.hole_states:
+@@
+ 
+         return {
+             "status": "seeded",
+             "game_state": wgp_simulation.get_game_state(),
+         }
+ 
+-
+-@app.get("/simulation/state")
+-def get_simulation_state():
+-    """Return the current simulation state for diagnostics and testing."""
+-    global wgp_simulation
+-
+-    if not wgp_simulation:
+-        raise HTTPException(status_code=404, detail="Simulation not initialized")
+-
+-    try:
+-        return wgp_simulation.get_game_state()
+-    except Exception as exc:  # pragma: no cover
+-        logger.error(f"Failed to fetch simulation state: {exc}")
+-        raise HTTPException(status_code=500, detail="Failed to fetch simulation state")
++    @app.get("/simulation/state")
++    def get_simulation_state(x_admin_email: Optional[str] = Header(None)):
++        """Return the current simulation state for diagnostics and testing."""
++        global wgp_simulation
++
++        require_admin(x_admin_email)
++
++        if not wgp_simulation:
++            raise HTTPException(status_code=404, detail="Simulation not initialized")
++
++        try:
++            return wgp_simulation.get_game_state()
++        except Exception as exc:  # pragma: no cover
++            logger.error(f"Failed to fetch simulation state: {exc}")
++            raise HTTPException(status_code=500, detail="Failed to fetch simulation state")
+ 
+ @app.get("/simulation/available-personalities")
+ def get_available_personalities():
+     """Get list of available AI personality types"""
+     try:
+@@
+ # Get the path to the built React app
+ STATIC_DIR = Path(__file__).parent.parent.parent / "frontend" / "build"
+ 
+-# Simple test endpoint  
+-@app.get("/test-deployment")
+-async def test_deployment():
+-    """Test that new deployments are working"""
+-    return {"message": "Deployment is working", "timestamp": datetime.now().isoformat()}
+-
+-# Debug endpoint to check paths
+-@app.get("/debug/paths")
+-async def debug_paths():
+-    """Debug endpoint to check file paths"""
+-    current_file = Path(__file__).resolve()
+-    static_dir = STATIC_DIR.resolve()
+-    index_file = static_dir / "index.html"
+-    
+-    return {
+-        "current_file": str(current_file),
+-        "static_dir": str(static_dir),
+-        "static_dir_exists": static_dir.exists(),
+-        "index_file": str(index_file),
+-        "index_file_exists": index_file.exists(),
+-        "static_dir_contents": list(static_dir.iterdir()) if static_dir.exists() else []
+-    }
++if ENABLE_TEST_ENDPOINTS:
++
++    # Simple test endpoint  
++    @app.get("/test-deployment")
++    async def test_deployment(x_admin_email: Optional[str] = Header(None)):
++        """Test that new deployments are working"""
++        require_admin(x_admin_email)
++        return {"message": "Deployment is working", "timestamp": datetime.now().isoformat()}
++
++    # Debug endpoint to check paths
++    @app.get("/debug/paths")
++    async def debug_paths(x_admin_email: Optional[str] = Header(None)):
++        """Debug endpoint to check file paths"""
++        require_admin(x_admin_email)
++        current_file = Path(__file__).resolve()
++        static_dir = STATIC_DIR.resolve()
++        index_file = static_dir / "index.html"
++        
++        return {
++            "current_file": str(current_file),
++            "static_dir": str(static_dir),
++            "static_dir_exists": static_dir.exists(),
++            "index_file": str(index_file),
++            "index_file_exists": index_file.exists(),
++            "static_dir_contents": list(static_dir.iterdir()) if static_dir.exists() else []
++        }
+ 
+ # Mount static files if build directory exists
+ static_assets_dir = STATIC_DIR / "static"
+ 
+ if STATIC_DIR.exists() and static_assets_dir.exists():
+```
+[2025-10-20T16:39:04] tokens used: 38,276
diff --git a/backend/app/main.py b/backend/app/main.py
index 830f332b..50b35e64 100644
--- a/backend/app/main.py
+++ b/backend/app/main.py
@@ -138,7 +138,13 @@ app = FastAPI(
     redoc_url="/redoc" if os.getenv("ENVIRONMENT") != "production" else None
 )
 
-ENABLE_TEST_ENDPOINTS = os.getenv("ENABLE_TEST_ENDPOINTS", "true").lower() in {"1", "true", "yes"}
+ENABLE_TEST_ENDPOINTS = os.getenv("ENABLE_TEST_ENDPOINTS", "false").lower() in {"1", "true", "yes"}
+ADMIN_EMAILS = {"stuagano@gmail.com", "admin@wgp.com"}
+
+
+def require_admin(x_admin_email: Optional[str] = Header(None)) -> None:
+    if not x_admin_email or x_admin_email not in ADMIN_EMAILS:
+        raise HTTPException(status_code=403, detail="Admin access required")
 
 # Database initialization moved to main startup handler
 
@@ -4604,7 +4610,7 @@ def simulate_hole(request: Dict[str, Any] = Body(default_factory=dict)):
 if ENABLE_TEST_ENDPOINTS:
 
     @app.post("/simulation/test/seed-state")
-    def seed_simulation_state(payload: SimulationSeedRequest):
+    def seed_simulation_state(payload: SimulationSeedRequest, x_admin_email: Optional[str] = Header(None)):
         """Testing-only helper for seeding the current simulation state.
 
         Allows BDD and backend tests to manipulate the in-memory simulation using
@@ -4613,6 +4619,8 @@ if ENABLE_TEST_ENDPOINTS:
 
         global wgp_simulation
 
+        require_admin(x_admin_email)
+
         if not wgp_simulation:
             raise HTTPException(status_code=400, detail="Simulation not initialized. Call /simulation/setup first.")
 
@@ -4725,10 +4733,15 @@ if ENABLE_TEST_ENDPOINTS:
 
 
 @app.get("/simulation/state")
-def get_simulation_state():
+def get_simulation_state(x_admin_email: Optional[str] = Header(None)):
     """Return the current simulation state for diagnostics and testing."""
     global wgp_simulation
 
+    if not ENABLE_TEST_ENDPOINTS:
+        raise HTTPException(status_code=404, detail="Not found")
+
+    require_admin(x_admin_email)
+
     if not wgp_simulation:
         raise HTTPException(status_code=404, detail="Simulation not initialized")
 
@@ -6826,28 +6839,30 @@ async def create_and_notify_matches():
         if 'db' in locals():
             db.close()
 
-# Simple test endpoint  
-@app.get("/test-deployment")
-async def test_deployment():
-    """Test that new deployments are working"""
-    return {"message": "Deployment is working", "timestamp": datetime.now().isoformat()}
-
-# Debug endpoint to check paths
-@app.get("/debug/paths")
-async def debug_paths():
-    """Debug endpoint to check file paths"""
-    current_file = Path(__file__).resolve()
-    static_dir = STATIC_DIR.resolve()
-    index_file = static_dir / "index.html"
-    
-    return {
-        "current_file": str(current_file),
-        "static_dir": str(static_dir),
-        "static_dir_exists": static_dir.exists(),
-        "index_file": str(index_file),
-        "index_file_exists": index_file.exists(),
-        "static_dir_contents": list(static_dir.iterdir()) if static_dir.exists() else []
-    }
+if ENABLE_TEST_ENDPOINTS:
+
+    @app.get("/test-deployment")
+    async def test_deployment(x_admin_email: Optional[str] = Header(None)):
+        """Test that new deployments are working"""
+        require_admin(x_admin_email)
+        return {"message": "Deployment is working", "timestamp": datetime.now().isoformat()}
+
+    @app.get("/debug/paths")
+    async def debug_paths(x_admin_email: Optional[str] = Header(None)):
+        """Debug endpoint to check file paths"""
+        require_admin(x_admin_email)
+        current_file = Path(__file__).resolve()
+        static_dir = STATIC_DIR.resolve()
+        index_file = static_dir / "index.html"
+
+        return {
+            "current_file": str(current_file),
+            "static_dir": str(static_dir),
+            "static_dir_exists": static_dir.exists(),
+            "index_file": str(index_file),
+            "index_file_exists": index_file.exists(),
+            "static_dir_contents": list(static_dir.iterdir()) if static_dir.exists() else []
+        }
 
 # Mount static files if build directory exists
 static_assets_dir = STATIC_DIR / "static"
