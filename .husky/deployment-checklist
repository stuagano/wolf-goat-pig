#!/bin/sh

# Deployment checklist - run before deploying to production
# Usage: .husky/deployment-checklist

echo "üìã Wolf-Goat-Pig Deployment Checklist"
echo "======================================"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Track readiness
READY_TO_DEPLOY=true
WARNINGS=0

echo ""
echo -e "${BLUE}1. Code Quality Checks${NC}"
echo "------------------------"

# Run tests
echo -n "Backend tests: "
if cd backend && python -m pytest tests/ -q --tb=no > /dev/null 2>&1; then
    echo -e "${GREEN}PASS${NC}"
else
    echo -e "${RED}FAIL${NC}"
    READY_TO_DEPLOY=false
fi
cd ..

echo -n "Frontend tests: "
if cd frontend && npm test -- --watchAll=false --passWithNoTests > /dev/null 2>&1; then
    echo -e "${GREEN}PASS${NC}"
else
    echo -e "${YELLOW}WARN${NC} (some tests may be failing)"
    WARNINGS=$((WARNINGS + 1))
fi
cd ..

echo ""
echo -e "${BLUE}2. Build Verification${NC}"
echo "---------------------"

echo -n "Frontend production build: "
if cd frontend && npm run build > /dev/null 2>&1; then
    BUILD_SIZE=$(du -sh build 2>/dev/null | cut -f1)
    echo -e "${GREEN}SUCCESS${NC} (Size: $BUILD_SIZE)"
    rm -rf build
else
    echo -e "${RED}FAIL${NC}"
    READY_TO_DEPLOY=false
fi
cd ..

echo -n "Backend dependencies: "
if cd backend && pip check > /dev/null 2>&1; then
    echo -e "${GREEN}OK${NC}"
else
    echo -e "${YELLOW}WARN${NC} (check pip dependencies)"
    WARNINGS=$((WARNINGS + 1))
fi
cd ..

echo ""
echo -e "${BLUE}3. Environment Configuration${NC}"
echo "----------------------------"

# Check environment files
FILES_TO_CHECK=(
    ".env.example:Example environment file"
    "backend/requirements.txt:Backend dependencies"
    "frontend/package.json:Frontend dependencies"
    "docker-compose.prod.yml:Docker production config"
)

for entry in "${FILES_TO_CHECK[@]}"; do
    IFS=':' read -r file desc <<< "$entry"
    printf "%-30s " "$desc:"
    if [ -f "$file" ]; then
        echo -e "${GREEN}‚úì${NC}"
    else
        echo -e "${RED}‚úó${NC}"
        READY_TO_DEPLOY=false
    fi
done

echo ""
echo -e "${BLUE}4. Security Checks${NC}"
echo "------------------"

# Check for sensitive data
echo -n "Checking for exposed secrets: "
SECRETS_FOUND=false
for pattern in "password=" "api_key=" "secret=" "token="; do
    if git grep -q "$pattern" -- '*.py' '*.js' '*.jsx' '*.ts' '*.tsx' 2>/dev/null; then
        SECRETS_FOUND=true
        break
    fi
done

if [ "$SECRETS_FOUND" = false ]; then
    echo -e "${GREEN}CLEAN${NC}"
else
    echo -e "${YELLOW}POTENTIAL ISSUES${NC}"
    WARNINGS=$((WARNINGS + 1))
fi

# Check for debug code
echo -n "Debug statements: "
DEBUG_COUNT=$(git grep -E "(console\.log|print\(|debugger)" -- '*.py' '*.js' '*.jsx' '*.ts' '*.tsx' 2>/dev/null | wc -l)
if [ "$DEBUG_COUNT" -eq 0 ]; then
    echo -e "${GREEN}NONE${NC}"
else
    echo -e "${YELLOW}$DEBUG_COUNT found${NC}"
    WARNINGS=$((WARNINGS + 1))
fi

echo ""
echo -e "${BLUE}5. Deployment Services${NC}"
echo "----------------------"

# Check if services are configured
echo "Render (Backend):"
if [ -f "render.yaml" ]; then
    echo -e "  Config: ${GREEN}‚úì${NC}"
else
    echo -e "  Config: ${YELLOW}Not found${NC}"
fi

echo "Vercel (Frontend):"
if [ -f "vercel.json" ] || [ -f "frontend/vercel.json" ]; then
    echo -e "  Config: ${GREEN}‚úì${NC}"
else
    echo -e "  Config: ${YELLOW}Not found${NC}"
fi

echo ""
echo -e "${BLUE}6. Local Deployment Test${NC}"
echo "------------------------"

echo "Run deployment verification:"
echo -e "${YELLOW}  python scripts/verify-deployments.py${NC}"
echo ""
echo "Test with Docker:"
echo -e "${YELLOW}  docker-compose -f docker-compose.prod.yml up${NC}"

echo ""
echo "======================================"
echo -e "${BLUE}DEPLOYMENT READINESS SUMMARY${NC}"
echo "======================================"

if [ "$READY_TO_DEPLOY" = true ]; then
    if [ "$WARNINGS" -eq 0 ]; then
        echo -e "${GREEN}‚úÖ READY TO DEPLOY${NC}"
        echo "All checks passed successfully!"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  READY WITH WARNINGS${NC}"
        echo "Found $WARNINGS warning(s) - review before deploying"
    fi
else
    echo -e "${RED}‚ùå NOT READY TO DEPLOY${NC}"
    echo "Critical issues found - fix before deploying"
fi

echo ""
echo "Next steps:"
if [ "$READY_TO_DEPLOY" = true ]; then
    echo "1. Run: ./scripts/test-prod-all.sh"
    echo "2. Push to main branch"
    echo "3. Deploy via Render/Vercel dashboards"
else
    echo "1. Fix the failed checks above"
    echo "2. Run this checklist again"
fi

# Exit with appropriate code
if [ "$READY_TO_DEPLOY" = false ]; then
    exit 1
fi